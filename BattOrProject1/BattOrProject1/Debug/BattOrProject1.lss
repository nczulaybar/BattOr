
BattOrProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00802014  00802014  00000b46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002255  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00002f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  000043a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a4  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000285  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
   8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
   c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  38:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_14>
  3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
  fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
 1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <uart_getchar>
 200:	0c 94 41 02 	jmp	0x482	; 0x482 <uart_putchar>

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df e5       	ldi	r29, 0x5F	; 95
 20e:	de bf       	out	0x3e, r29	; 62
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e9       	ldi	r30, 0x9E	; 158
 21c:	fa e0       	ldi	r31, 0x0A	; 10
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 31       	cpi	r26, 0x14	; 20
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
 22e:	20 e2       	ldi	r18, 0x20	; 32
 230:	a4 e1       	ldi	r26, 0x14	; 20
 232:	b0 e2       	ldi	r27, 0x20	; 32
 234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
 236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
 238:	a0 33       	cpi	r26, 0x30	; 48
 23a:	b2 07       	cpc	r27, r18
 23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
 23e:	0e 94 11 02 	call	0x422	; 0x422 <main>
 242:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

00000246 <__bad_interrupt>:
 246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <blink_init>:
uint32_t lastTime;
volatile uint8_t fivemscounter;

//Initialize the state of all of the LEDs in local state of the blink library to have their blinks disabled. Also, setup a timer that will fire an interrupt once every millisecond. Note that the timer is clocked off of the peripheral clock, and the peripheral clock is clocked off of the system clock.
void blink_init(){
	timer_init(&TCC0, 0b11); //high interrupt level
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	98 e0       	ldi	r25, 0x08	; 8
 250:	0e 94 73 02 	call	0x4e6	; 0x4e6 <timer_init>
	timer_set(&TCC0, 0b1, 2000); //2000 ticks corresponds to 1ms, as of 10/15 10:32pm
 254:	40 ed       	ldi	r20, 0xD0	; 208
 256:	57 e0       	ldi	r21, 0x07	; 7
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	98 e0       	ldi	r25, 0x08	; 8
 25e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <timer_set>
 262:	08 95       	ret

00000264 <__vector_14>:
}

ISR(TCC0_OVF_vect){
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
	globalTime++;
 276:	80 91 21 20 	lds	r24, 0x2021
 27a:	90 91 22 20 	lds	r25, 0x2022
 27e:	a0 91 23 20 	lds	r26, 0x2023
 282:	b0 91 24 20 	lds	r27, 0x2024
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	a1 1d       	adc	r26, r1
 28a:	b1 1d       	adc	r27, r1
 28c:	80 93 21 20 	sts	0x2021, r24
 290:	90 93 22 20 	sts	0x2022, r25
 294:	a0 93 23 20 	sts	0x2023, r26
 298:	b0 93 24 20 	sts	0x2024, r27
	checkBlink ++;
 29c:	80 91 20 20 	lds	r24, 0x2020
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 20 20 	sts	0x2020, r24
}
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <blink_set>:

//Set the specified led to blink at the specified interval_ms.
void blink_set(uint8_t led, uint16_t interval_ms) {
 2b8:	e4 e1       	ldi	r30, 0x14	; 20
 2ba:	f0 e2       	ldi	r31, 0x20	; 32
 2bc:	40 e2       	ldi	r20, 0x20	; 32
 2be:	50 e2       	ldi	r21, 0x20	; 32
	uint8_t i = 0;
	for (uint8_t pos = 0b1; pos < 0b1000; pos = pos << 1) {
 2c0:	91 e0       	ldi	r25, 0x01	; 1
		if(pos & led) LEDArray[i].blinkInterval = interval_ms;
 2c2:	29 2f       	mov	r18, r25
 2c4:	28 23       	and	r18, r24
 2c6:	11 f0       	breq	.+4      	; 0x2cc <blink_set+0x14>
 2c8:	60 83       	st	Z, r22
 2ca:	71 83       	std	Z+1, r23	; 0x01
}

//Set the specified led to blink at the specified interval_ms.
void blink_set(uint8_t led, uint16_t interval_ms) {
	uint8_t i = 0;
	for (uint8_t pos = 0b1; pos < 0b1000; pos = pos << 1) {
 2cc:	99 0f       	add	r25, r25
 2ce:	34 96       	adiw	r30, 0x04	; 4
 2d0:	e4 17       	cp	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	b1 f7       	brne	.-20     	; 0x2c2 <blink_set+0xa>
		if(pos & led) LEDArray[i].blinkInterval = interval_ms;
		i++;
	}
}
 2d6:	08 95       	ret

000002d8 <blink_ms_timer_update>:

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	04 e1       	ldi	r16, 0x14	; 20
 2ee:	10 e2       	ldi	r17, 0x20	; 32
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
			if (lastTime < globalTime) {
				LEDArray[i].counter += (globalTime - lastTime); 
				}
			if (LEDArray[i].counter >= LEDArray[i].blinkInterval) {
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
				led_toggle(0b1 << (i));
 2f4:	ff 24       	eor	r15, r15
 2f6:	f3 94       	inc	r15
}

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
	for (uint8_t i = 0; i < 3; i++) {
		if (LEDArray[i].blinkInterval != 0) {
 2f8:	ec 2e       	mov	r14, r28
 2fa:	f8 01       	movw	r30, r16
 2fc:	80 81       	ld	r24, Z
 2fe:	91 81       	ldd	r25, Z+1	; 0x01
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	b9 f1       	breq	.+110    	; 0x372 <blink_ms_timer_update+0x9a>
			if (lastTime < globalTime) {
 304:	80 90 25 20 	lds	r8, 0x2025
 308:	90 90 26 20 	lds	r9, 0x2026
 30c:	a0 90 27 20 	lds	r10, 0x2027
 310:	b0 90 28 20 	lds	r11, 0x2028
 314:	40 91 21 20 	lds	r20, 0x2021
 318:	50 91 22 20 	lds	r21, 0x2022
 31c:	60 91 23 20 	lds	r22, 0x2023
 320:	70 91 24 20 	lds	r23, 0x2024
 324:	84 16       	cp	r8, r20
 326:	95 06       	cpc	r9, r21
 328:	a6 06       	cpc	r10, r22
 32a:	b7 06       	cpc	r11, r23
 32c:	90 f4       	brcc	.+36     	; 0x352 <blink_ms_timer_update+0x7a>
				LEDArray[i].counter += (globalTime - lastTime); 
 32e:	40 91 21 20 	lds	r20, 0x2021
 332:	50 91 22 20 	lds	r21, 0x2022
 336:	60 91 23 20 	lds	r22, 0x2023
 33a:	70 91 24 20 	lds	r23, 0x2024
 33e:	48 19       	sub	r20, r8
 340:	59 09       	sbc	r21, r9
 342:	6a 09       	sbc	r22, r10
 344:	7b 09       	sbc	r23, r11
 346:	22 81       	ldd	r18, Z+2	; 0x02
 348:	33 81       	ldd	r19, Z+3	; 0x03
 34a:	42 0f       	add	r20, r18
 34c:	53 1f       	adc	r21, r19
 34e:	42 83       	std	Z+2, r20	; 0x02
 350:	53 83       	std	Z+3, r21	; 0x03
				}
			if (LEDArray[i].counter >= LEDArray[i].blinkInterval) {
 352:	22 81       	ldd	r18, Z+2	; 0x02
 354:	33 81       	ldd	r19, Z+3	; 0x03
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
 35a:	58 f0       	brcs	.+22     	; 0x372 <blink_ms_timer_update+0x9a>
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
 35c:	28 1b       	sub	r18, r24
 35e:	39 0b       	sbc	r19, r25
 360:	22 83       	std	Z+2, r18	; 0x02
 362:	33 83       	std	Z+3, r19	; 0x03
				led_toggle(0b1 << (i));
 364:	8f 2d       	mov	r24, r15
 366:	01 c0       	rjmp	.+2      	; 0x36a <blink_ms_timer_update+0x92>
 368:	88 0f       	add	r24, r24
 36a:	ea 94       	dec	r14
 36c:	ea f7       	brpl	.-6      	; 0x368 <blink_ms_timer_update+0x90>
 36e:	0e 94 0e 02 	call	0x41c	; 0x41c <led_toggle>
 372:	21 96       	adiw	r28, 0x01	; 1
 374:	0c 5f       	subi	r16, 0xFC	; 252
 376:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
	for (uint8_t i = 0; i < 3; i++) {
 378:	c3 30       	cpi	r28, 0x03	; 3
 37a:	d1 05       	cpc	r29, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <blink_ms_timer_update+0xa8>
 37e:	bc cf       	rjmp	.-136    	; 0x2f8 <blink_ms_timer_update+0x20>
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
				led_toggle(0b1 << (i));
			}
		}
	}
	lastTime = globalTime;
 380:	80 91 21 20 	lds	r24, 0x2021
 384:	90 91 22 20 	lds	r25, 0x2022
 388:	a0 91 23 20 	lds	r26, 0x2023
 38c:	b0 91 24 20 	lds	r27, 0x2024
 390:	80 93 25 20 	sts	0x2025, r24
 394:	90 93 26 20 	sts	0x2026, r25
 398:	a0 93 27 20 	sts	0x2027, r26
 39c:	b0 93 28 20 	sts	0x2028, r27
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	bf 90       	pop	r11
 3ae:	af 90       	pop	r10
 3b0:	9f 90       	pop	r9
 3b2:	8f 90       	pop	r8
 3b4:	08 95       	ret

000003b6 <clock_switch_to_ext_crystal>:
#include "timer.h"
#include "blink.h"

void clock_switch_to_ext_crystal(){
	
	OSC.XOSCCTRL = 0b11001011;
 3b6:	e0 e5       	ldi	r30, 0x50	; 80
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	8b ec       	ldi	r24, 0xCB	; 203
 3bc:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = OSC.CTRL | 0b1000;
 3be:	80 81       	ld	r24, Z
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	80 83       	st	Z, r24
	while(!(OSC.STATUS & 0b1000)){
 3c4:	81 81       	ldd	r24, Z+1	; 0x01
 3c6:	83 ff       	sbrs	r24, 3
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <clock_switch_to_ext_crystal+0xe>
	}
	CPU_CCP = CCP_IOREG_gc;
 3ca:	88 ed       	ldi	r24, 0xD8	; 216
 3cc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b11; //Changes multiplexer to set source to external oscillator
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	80 93 40 00 	sts	0x0040, r24
 3d4:	08 95       	ret

000003d6 <gpio_set_mode>:
#include <stdint.h>
#include <avr/io.h>

//Set the specified pin on the specified port to be in output (1) or input (0) mode.
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in){
  if(out_or_in) port->DIRSET = pin;
 3d6:	44 23       	and	r20, r20
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <gpio_set_mode+0xa>
 3da:	fc 01       	movw	r30, r24
 3dc:	61 83       	std	Z+1, r22	; 0x01
 3de:	08 95       	ret
  else port->DIRCLR = pin;
 3e0:	fc 01       	movw	r30, r24
 3e2:	62 83       	std	Z+2, r22	; 0x02
 3e4:	08 95       	ret

000003e6 <led_init>:
	}
};

//Setup all of the LEDs so they are in output mode and off.
void led_init(){
	gpio_set_mode(&PORTC, LED_GREEN_bm, 1);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	80 e4       	ldi	r24, 0x40	; 64
 3ec:	96 e0       	ldi	r25, 0x06	; 6
 3ee:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gpio_set_mode>
	gpio_set_mode(&PORTC, LED_YELLOW_bm, 1);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	80 e4       	ldi	r24, 0x40	; 64
 3f8:	96 e0       	ldi	r25, 0x06	; 6
 3fa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gpio_set_mode>
	gpio_set_mode(&PORTC, LED_RED_bm, 1);
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	80 e4       	ldi	r24, 0x40	; 64
 404:	96 e0       	ldi	r25, 0x06	; 6
 406:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gpio_set_mode>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
 40a:	e0 e4       	ldi	r30, 0x40	; 64
 40c:	f6 e0       	ldi	r31, 0x06	; 6
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	85 83       	std	Z+5, r24	; 0x05
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	85 83       	std	Z+5, r24	; 0x05
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	85 83       	std	Z+5, r24	; 0x05
 41a:	08 95       	ret

0000041c <led_toggle>:
	else port->OUTCLR = pin;
}

//If the specified pin on the specified port is in output mode, toggle the pin’s state (if 1 then 0, if 0 then 1).
inline void gpio_toggle_out(PORT_t* port, uint8_t pin){
	port->OUTTGL=pin;
 41c:	80 93 47 06 	sts	0x0647, r24
 420:	08 95       	ret

00000422 <main>:
volatile uint8_t checkBlink;
uint32_t lastTime;

int main(void)
{
	sei();
 422:	78 94       	sei
	PMIC.CTRL = PMIC.CTRL | 0b111;
 424:	e0 ea       	ldi	r30, 0xA0	; 160
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	82 81       	ldd	r24, Z+2	; 0x02
 42a:	87 60       	ori	r24, 0x07	; 7
 42c:	82 83       	std	Z+2, r24	; 0x02
	
	
	led_init();
 42e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <led_init>
	blink_init();
 432:	0e 94 25 01 	call	0x24a	; 0x24a <blink_init>
	
	blink_set(LED_GREEN_bm, 100);
 436:	64 e6       	ldi	r22, 0x64	; 100
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	blink_set(LED_YELLOW_bm, 250);
 440:	6a ef       	ldi	r22, 0xFA	; 250
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	blink_set(LED_RED_bm, 500);
 44a:	64 ef       	ldi	r22, 0xF4	; 244
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	
	clock_switch_to_ext_crystal();
 454:	0e 94 db 01 	call	0x3b6	; 0x3b6 <clock_switch_to_ext_crystal>
	
	uart_init();
 458:	0e 94 80 02 	call	0x500	; 0x500 <uart_init>
	stdinout_init();
 45c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <stdinout_init>
	
    while (1)
    {
		printf("hullo");
 460:	ce e0       	ldi	r28, 0x0E	; 14
 462:	d0 e2       	ldi	r29, 0x20	; 32
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	0e 94 98 02 	call	0x530	; 0x530 <printf>
		
		if(checkBlink >= 5) {
 46c:	80 91 20 20 	lds	r24, 0x2020
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	85 30       	cpi	r24, 0x05	; 5
 476:	b0 f3       	brcs	.-20     	; 0x464 <main+0x42>
			blink_ms_timer_update();
 478:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <blink_ms_timer_update>
			checkBlink = 0;
 47c:	10 92 20 20 	sts	0x2020, r1
 480:	f1 cf       	rjmp	.-30     	; 0x464 <main+0x42>

00000482 <uart_putchar>:
//Configure the USART D0 peripheral to operate at 1 Mbit/s baud, with 8 bit characters, one start bit and one stop bit, and no parity bits.
void uart_init();

//Transmit the specified byte called data over the UART bus. This function will complete when the byte has been fully transmitted.
inline void uart_tx_byte(uint8_t data){
  while(!(USARTD0.STATUS & USART_DREIF_bm)){} //Pause until ReadyToSend bit goes high
 482:	e0 ea       	ldi	r30, 0xA0	; 160
 484:	f9 e0       	ldi	r31, 0x09	; 9
 486:	91 81       	ldd	r25, Z+1	; 0x01
 488:	95 ff       	sbrs	r25, 5
 48a:	fd cf       	rjmp	.-6      	; 0x486 <uart_putchar+0x4>
  USARTD0.DATA = data;
 48c:	80 93 a0 09 	sts	0x09A0, r24
  while(!(USARTD0.STATUS & USART_TXCIF_bm)){} //Pause until Done Sending bit goes high
 490:	e0 ea       	ldi	r30, 0xA0	; 160
 492:	f9 e0       	ldi	r31, 0x09	; 9
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	96 ff       	sbrs	r25, 6
 498:	fd cf       	rjmp	.-6      	; 0x494 <uart_putchar+0x12>
#include "uart.h"
#include <stdio.h>

int uart_putchar(char c, FILE* stream){
	uart_tx_byte(c);
	if(c == '\n') uart_tx_byte('\r');
 49a:	8a 30       	cpi	r24, 0x0A	; 10
 49c:	69 f4       	brne	.+26     	; 0x4b8 <uart_putchar+0x36>
//Configure the USART D0 peripheral to operate at 1 Mbit/s baud, with 8 bit characters, one start bit and one stop bit, and no parity bits.
void uart_init();

//Transmit the specified byte called data over the UART bus. This function will complete when the byte has been fully transmitted.
inline void uart_tx_byte(uint8_t data){
  while(!(USARTD0.STATUS & USART_DREIF_bm)){} //Pause until ReadyToSend bit goes high
 49e:	e0 ea       	ldi	r30, 0xA0	; 160
 4a0:	f9 e0       	ldi	r31, 0x09	; 9
 4a2:	81 81       	ldd	r24, Z+1	; 0x01
 4a4:	85 ff       	sbrs	r24, 5
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <uart_putchar+0x20>
  USARTD0.DATA = data;
 4a8:	8d e0       	ldi	r24, 0x0D	; 13
 4aa:	80 93 a0 09 	sts	0x09A0, r24
  while(!(USARTD0.STATUS & USART_TXCIF_bm)){} //Pause until Done Sending bit goes high
 4ae:	e0 ea       	ldi	r30, 0xA0	; 160
 4b0:	f9 e0       	ldi	r31, 0x09	; 9
 4b2:	81 81       	ldd	r24, Z+1	; 0x01
 4b4:	86 ff       	sbrs	r24, 6
 4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <uart_putchar+0x30>
	return 0;
}
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	08 95       	ret

000004be <uart_getchar>:
}
  
//Receive the specified byte called data over the UART bus. This function will complete when one byte has been fully received.
inline uint8_t uart_rx_byte(){
  while(!(USARTD0.STATUS & USART_RXCIF_bm)){} //Pause until data ready bit goes high
 4be:	e0 ea       	ldi	r30, 0xA0	; 160
 4c0:	f9 e0       	ldi	r31, 0x09	; 9
 4c2:	81 81       	ldd	r24, Z+1	; 0x01
 4c4:	88 23       	and	r24, r24
 4c6:	ec f7       	brge	.-6      	; 0x4c2 <uart_getchar+0x4>
  return USARTD0.DATA;
 4c8:	80 91 a0 09 	lds	r24, 0x09A0

int uart_getchar(FILE* stream){
	return uart_rx_byte();
}
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <stdinout_init>:

void stdinout_init(){
	uart_init();
 4d0:	0e 94 80 02 	call	0x500	; 0x500 <uart_init>

	static FILE uart_stream = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

	stdout = &uart_stream;
 4d4:	ea e2       	ldi	r30, 0x2A	; 42
 4d6:	f0 e2       	ldi	r31, 0x20	; 32
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e2       	ldi	r25, 0x20	; 32
 4dc:	82 83       	std	Z+2, r24	; 0x02
 4de:	93 83       	std	Z+3, r25	; 0x03
	stdin = &uart_stream;
 4e0:	80 83       	st	Z, r24
 4e2:	91 83       	std	Z+1, r25	; 0x01
 4e4:	08 95       	ret

000004e6 <timer_init>:
#include <stdint.h>
#include <avr/io.h>
#include "gpio.h"

//Setup the specified timer peripheral. Clear out any timer state and reset all counters. Set it to have the specified interrupt_level.
void timer_init(TC0_t* timer, uint8_t int_level){
 4e6:	fc 01       	movw	r30, r24
	timer->CTRLFSET = timer->CTRLFSET | 0b1000; //Executes reset command on CTRLFSet, see p179
 4e8:	81 85       	ldd	r24, Z+9	; 0x09
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	81 87       	std	Z+9, r24	; 0x09
	timer->INTCTRLA = 0b1 & int_level; //Enables overflow interrupt. See p134.
 4ee:	61 70       	andi	r22, 0x01	; 1
 4f0:	66 83       	std	Z+6, r22	; 0x06
 4f2:	08 95       	ret

000004f4 <timer_set>:
	setBit(timer->CTRLFSET, 0b1000, 1); //Executes restart command on CTRLFSet, see p179
}

//Takes in period as time in microseconds between every overflow interrupt.
void timer_set(TC0_t* timer, uint8_t prescaler, uint16_t period){
	timer->CTRLA = (0b00000111 & prescaler); //Set prescaler by setting lower 3 bits of CLKSel;
 4f4:	67 70       	andi	r22, 0x07	; 7
 4f6:	fc 01       	movw	r30, r24
 4f8:	60 83       	st	Z, r22
	timer->PER = period;
 4fa:	46 a3       	std	Z+38, r20	; 0x26
 4fc:	57 a3       	std	Z+39, r21	; 0x27
 4fe:	08 95       	ret

00000500 <uart_init>:
#include "gpio.h"
#include <avr/io.h>
#include <stdio.h>

void uart_init(){
  gpio_set_mode(&PORTD, 0b100, 0);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	64 e0       	ldi	r22, 0x04	; 4
 504:	80 e6       	ldi	r24, 0x60	; 96
 506:	96 e0       	ldi	r25, 0x06	; 6
 508:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gpio_set_mode>
  gpio_set_mode(&PORTD, 0b1000, 1);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	68 e0       	ldi	r22, 0x08	; 8
 510:	80 e6       	ldi	r24, 0x60	; 96
 512:	96 e0       	ldi	r25, 0x06	; 6
 514:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gpio_set_mode>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	80 93 65 06 	sts	0x0665, r24
  gpio_set_out(&PORTD, 0b1000, 1);
  USARTD0.CTRLB = 0b00011000; //Initialize UART
 51e:	e0 ea       	ldi	r30, 0xA0	; 160
 520:	f9 e0       	ldi	r31, 0x09	; 9
 522:	88 e1       	ldi	r24, 0x18	; 24
 524:	84 83       	std	Z+4, r24	; 0x04
  USARTD0.CTRLC = 0b00000011; //Set UART start, stop, parity, # data bits
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	85 83       	std	Z+5, r24	; 0x05
  USARTD0.BAUDCTRLA = 0b00000000; //This and next line set baud rate to f_clk/16, or 1MHz
 52a:	16 82       	std	Z+6, r1	; 0x06
  USARTD0.BAUDCTRLB = 0b00000000;
 52c:	17 82       	std	Z+7, r1	; 0x07
 52e:	08 95       	ret

00000530 <printf>:
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	ae 01       	movw	r20, r28
 53a:	4a 5f       	subi	r20, 0xFA	; 250
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	fa 01       	movw	r30, r20
 540:	61 91       	ld	r22, Z+
 542:	71 91       	ld	r23, Z+
 544:	af 01       	movw	r20, r30
 546:	80 91 2c 20 	lds	r24, 0x202C
 54a:	90 91 2d 20 	lds	r25, 0x202D
 54e:	0e 94 ac 02 	call	0x558	; 0x558 <vfprintf>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <vfprintf>:
 558:	2f 92       	push	r2
 55a:	3f 92       	push	r3
 55c:	4f 92       	push	r4
 55e:	5f 92       	push	r5
 560:	6f 92       	push	r6
 562:	7f 92       	push	r7
 564:	8f 92       	push	r8
 566:	9f 92       	push	r9
 568:	af 92       	push	r10
 56a:	bf 92       	push	r11
 56c:	cf 92       	push	r12
 56e:	df 92       	push	r13
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	2c 97       	sbiw	r28, 0x0c	; 12
 582:	cd bf       	out	0x3d, r28	; 61
 584:	de bf       	out	0x3e, r29	; 62
 586:	7c 01       	movw	r14, r24
 588:	6b 01       	movw	r12, r22
 58a:	8a 01       	movw	r16, r20
 58c:	fc 01       	movw	r30, r24
 58e:	16 82       	std	Z+6, r1	; 0x06
 590:	17 82       	std	Z+7, r1	; 0x07
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	81 ff       	sbrs	r24, 1
 596:	bd c1       	rjmp	.+890    	; 0x912 <vfprintf+0x3ba>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	4c 01       	movw	r8, r24
 59e:	f7 01       	movw	r30, r14
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
 5a2:	f6 01       	movw	r30, r12
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	6f 01       	movw	r12, r30
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <vfprintf+0x5c>
 5b2:	ab c1       	rjmp	.+854    	; 0x90a <vfprintf+0x3b2>
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <vfprintf+0x6e>
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	6f 01       	movw	r12, r30
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <vfprintf+0x78>
 5c6:	b7 01       	movw	r22, r14
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 5ce:	e7 cf       	rjmp	.-50     	; 0x59e <vfprintf+0x46>
 5d0:	51 2c       	mov	r5, r1
 5d2:	31 2c       	mov	r3, r1
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	20 32       	cpi	r18, 0x20	; 32
 5d8:	a0 f4       	brcc	.+40     	; 0x602 <vfprintf+0xaa>
 5da:	8b 32       	cpi	r24, 0x2B	; 43
 5dc:	69 f0       	breq	.+26     	; 0x5f8 <vfprintf+0xa0>
 5de:	30 f4       	brcc	.+12     	; 0x5ec <vfprintf+0x94>
 5e0:	80 32       	cpi	r24, 0x20	; 32
 5e2:	59 f0       	breq	.+22     	; 0x5fa <vfprintf+0xa2>
 5e4:	83 32       	cpi	r24, 0x23	; 35
 5e6:	69 f4       	brne	.+26     	; 0x602 <vfprintf+0xaa>
 5e8:	20 61       	ori	r18, 0x10	; 16
 5ea:	2c c0       	rjmp	.+88     	; 0x644 <vfprintf+0xec>
 5ec:	8d 32       	cpi	r24, 0x2D	; 45
 5ee:	39 f0       	breq	.+14     	; 0x5fe <vfprintf+0xa6>
 5f0:	80 33       	cpi	r24, 0x30	; 48
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0xaa>
 5f4:	21 60       	ori	r18, 0x01	; 1
 5f6:	26 c0       	rjmp	.+76     	; 0x644 <vfprintf+0xec>
 5f8:	22 60       	ori	r18, 0x02	; 2
 5fa:	24 60       	ori	r18, 0x04	; 4
 5fc:	23 c0       	rjmp	.+70     	; 0x644 <vfprintf+0xec>
 5fe:	28 60       	ori	r18, 0x08	; 8
 600:	21 c0       	rjmp	.+66     	; 0x644 <vfprintf+0xec>
 602:	27 fd       	sbrc	r18, 7
 604:	27 c0       	rjmp	.+78     	; 0x654 <vfprintf+0xfc>
 606:	30 ed       	ldi	r19, 0xD0	; 208
 608:	38 0f       	add	r19, r24
 60a:	3a 30       	cpi	r19, 0x0A	; 10
 60c:	78 f4       	brcc	.+30     	; 0x62c <vfprintf+0xd4>
 60e:	26 ff       	sbrs	r18, 6
 610:	06 c0       	rjmp	.+12     	; 0x61e <vfprintf+0xc6>
 612:	fa e0       	ldi	r31, 0x0A	; 10
 614:	5f 9e       	mul	r5, r31
 616:	30 0d       	add	r19, r0
 618:	11 24       	eor	r1, r1
 61a:	53 2e       	mov	r5, r19
 61c:	13 c0       	rjmp	.+38     	; 0x644 <vfprintf+0xec>
 61e:	8a e0       	ldi	r24, 0x0A	; 10
 620:	38 9e       	mul	r3, r24
 622:	30 0d       	add	r19, r0
 624:	11 24       	eor	r1, r1
 626:	33 2e       	mov	r3, r19
 628:	20 62       	ori	r18, 0x20	; 32
 62a:	0c c0       	rjmp	.+24     	; 0x644 <vfprintf+0xec>
 62c:	8e 32       	cpi	r24, 0x2E	; 46
 62e:	21 f4       	brne	.+8      	; 0x638 <vfprintf+0xe0>
 630:	26 fd       	sbrc	r18, 6
 632:	6b c1       	rjmp	.+726    	; 0x90a <vfprintf+0x3b2>
 634:	20 64       	ori	r18, 0x40	; 64
 636:	06 c0       	rjmp	.+12     	; 0x644 <vfprintf+0xec>
 638:	8c 36       	cpi	r24, 0x6C	; 108
 63a:	11 f4       	brne	.+4      	; 0x640 <vfprintf+0xe8>
 63c:	20 68       	ori	r18, 0x80	; 128
 63e:	02 c0       	rjmp	.+4      	; 0x644 <vfprintf+0xec>
 640:	88 36       	cpi	r24, 0x68	; 104
 642:	41 f4       	brne	.+16     	; 0x654 <vfprintf+0xfc>
 644:	f6 01       	movw	r30, r12
 646:	93 fd       	sbrc	r25, 3
 648:	85 91       	lpm	r24, Z+
 64a:	93 ff       	sbrs	r25, 3
 64c:	81 91       	ld	r24, Z+
 64e:	6f 01       	movw	r12, r30
 650:	81 11       	cpse	r24, r1
 652:	c1 cf       	rjmp	.-126    	; 0x5d6 <vfprintf+0x7e>
 654:	98 2f       	mov	r25, r24
 656:	9f 7d       	andi	r25, 0xDF	; 223
 658:	95 54       	subi	r25, 0x45	; 69
 65a:	93 30       	cpi	r25, 0x03	; 3
 65c:	28 f4       	brcc	.+10     	; 0x668 <vfprintf+0x110>
 65e:	0c 5f       	subi	r16, 0xFC	; 252
 660:	1f 4f       	sbci	r17, 0xFF	; 255
 662:	ff e3       	ldi	r31, 0x3F	; 63
 664:	f9 83       	std	Y+1, r31	; 0x01
 666:	0d c0       	rjmp	.+26     	; 0x682 <vfprintf+0x12a>
 668:	83 36       	cpi	r24, 0x63	; 99
 66a:	31 f0       	breq	.+12     	; 0x678 <vfprintf+0x120>
 66c:	83 37       	cpi	r24, 0x73	; 115
 66e:	71 f0       	breq	.+28     	; 0x68c <vfprintf+0x134>
 670:	83 35       	cpi	r24, 0x53	; 83
 672:	09 f0       	breq	.+2      	; 0x676 <vfprintf+0x11e>
 674:	5b c0       	rjmp	.+182    	; 0x72c <vfprintf+0x1d4>
 676:	22 c0       	rjmp	.+68     	; 0x6bc <vfprintf+0x164>
 678:	f8 01       	movw	r30, r16
 67a:	80 81       	ld	r24, Z
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	0e 5f       	subi	r16, 0xFE	; 254
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	44 24       	eor	r4, r4
 684:	43 94       	inc	r4
 686:	51 2c       	mov	r5, r1
 688:	54 01       	movw	r10, r8
 68a:	15 c0       	rjmp	.+42     	; 0x6b6 <vfprintf+0x15e>
 68c:	38 01       	movw	r6, r16
 68e:	f2 e0       	ldi	r31, 0x02	; 2
 690:	6f 0e       	add	r6, r31
 692:	71 1c       	adc	r7, r1
 694:	f8 01       	movw	r30, r16
 696:	a0 80       	ld	r10, Z
 698:	b1 80       	ldd	r11, Z+1	; 0x01
 69a:	26 ff       	sbrs	r18, 6
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <vfprintf+0x14c>
 69e:	65 2d       	mov	r22, r5
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <vfprintf+0x150>
 6a4:	6f ef       	ldi	r22, 0xFF	; 255
 6a6:	7f ef       	ldi	r23, 0xFF	; 255
 6a8:	c5 01       	movw	r24, r10
 6aa:	2c 87       	std	Y+12, r18	; 0x0c
 6ac:	0e 94 ac 04 	call	0x958	; 0x958 <strnlen>
 6b0:	2c 01       	movw	r4, r24
 6b2:	83 01       	movw	r16, r6
 6b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6b6:	2f 77       	andi	r18, 0x7F	; 127
 6b8:	22 2e       	mov	r2, r18
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <vfprintf+0x192>
 6bc:	38 01       	movw	r6, r16
 6be:	f2 e0       	ldi	r31, 0x02	; 2
 6c0:	6f 0e       	add	r6, r31
 6c2:	71 1c       	adc	r7, r1
 6c4:	f8 01       	movw	r30, r16
 6c6:	a0 80       	ld	r10, Z
 6c8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ca:	26 ff       	sbrs	r18, 6
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <vfprintf+0x17c>
 6ce:	65 2d       	mov	r22, r5
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <vfprintf+0x180>
 6d4:	6f ef       	ldi	r22, 0xFF	; 255
 6d6:	7f ef       	ldi	r23, 0xFF	; 255
 6d8:	c5 01       	movw	r24, r10
 6da:	2c 87       	std	Y+12, r18	; 0x0c
 6dc:	0e 94 a1 04 	call	0x942	; 0x942 <strnlen_P>
 6e0:	2c 01       	movw	r4, r24
 6e2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6e4:	20 68       	ori	r18, 0x80	; 128
 6e6:	22 2e       	mov	r2, r18
 6e8:	83 01       	movw	r16, r6
 6ea:	23 fc       	sbrc	r2, 3
 6ec:	1b c0       	rjmp	.+54     	; 0x724 <vfprintf+0x1cc>
 6ee:	83 2d       	mov	r24, r3
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	48 16       	cp	r4, r24
 6f4:	59 06       	cpc	r5, r25
 6f6:	b0 f4       	brcc	.+44     	; 0x724 <vfprintf+0x1cc>
 6f8:	b7 01       	movw	r22, r14
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 702:	3a 94       	dec	r3
 704:	f4 cf       	rjmp	.-24     	; 0x6ee <vfprintf+0x196>
 706:	f5 01       	movw	r30, r10
 708:	27 fc       	sbrc	r2, 7
 70a:	85 91       	lpm	r24, Z+
 70c:	27 fe       	sbrs	r2, 7
 70e:	81 91       	ld	r24, Z+
 710:	5f 01       	movw	r10, r30
 712:	b7 01       	movw	r22, r14
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 71a:	31 10       	cpse	r3, r1
 71c:	3a 94       	dec	r3
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	4f 1a       	sub	r4, r31
 722:	51 08       	sbc	r5, r1
 724:	41 14       	cp	r4, r1
 726:	51 04       	cpc	r5, r1
 728:	71 f7       	brne	.-36     	; 0x706 <vfprintf+0x1ae>
 72a:	e5 c0       	rjmp	.+458    	; 0x8f6 <vfprintf+0x39e>
 72c:	84 36       	cpi	r24, 0x64	; 100
 72e:	11 f0       	breq	.+4      	; 0x734 <vfprintf+0x1dc>
 730:	89 36       	cpi	r24, 0x69	; 105
 732:	39 f5       	brne	.+78     	; 0x782 <vfprintf+0x22a>
 734:	f8 01       	movw	r30, r16
 736:	27 ff       	sbrs	r18, 7
 738:	07 c0       	rjmp	.+14     	; 0x748 <vfprintf+0x1f0>
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	82 81       	ldd	r24, Z+2	; 0x02
 740:	93 81       	ldd	r25, Z+3	; 0x03
 742:	0c 5f       	subi	r16, 0xFC	; 252
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0x200>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	07 2e       	mov	r0, r23
 74e:	00 0c       	add	r0, r0
 750:	88 0b       	sbc	r24, r24
 752:	99 0b       	sbc	r25, r25
 754:	0e 5f       	subi	r16, 0xFE	; 254
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	2f 76       	andi	r18, 0x6F	; 111
 75a:	72 2e       	mov	r7, r18
 75c:	97 ff       	sbrs	r25, 7
 75e:	09 c0       	rjmp	.+18     	; 0x772 <vfprintf+0x21a>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	20 68       	ori	r18, 0x80	; 128
 770:	72 2e       	mov	r7, r18
 772:	2a e0       	ldi	r18, 0x0A	; 10
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	a4 01       	movw	r20, r8
 778:	0e 94 ef 04 	call	0x9de	; 0x9de <__ultoa_invert>
 77c:	a8 2e       	mov	r10, r24
 77e:	a8 18       	sub	r10, r8
 780:	44 c0       	rjmp	.+136    	; 0x80a <vfprintf+0x2b2>
 782:	85 37       	cpi	r24, 0x75	; 117
 784:	29 f4       	brne	.+10     	; 0x790 <vfprintf+0x238>
 786:	2f 7e       	andi	r18, 0xEF	; 239
 788:	b2 2e       	mov	r11, r18
 78a:	2a e0       	ldi	r18, 0x0A	; 10
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	25 c0       	rjmp	.+74     	; 0x7da <vfprintf+0x282>
 790:	f2 2f       	mov	r31, r18
 792:	f9 7f       	andi	r31, 0xF9	; 249
 794:	bf 2e       	mov	r11, r31
 796:	8f 36       	cpi	r24, 0x6F	; 111
 798:	c1 f0       	breq	.+48     	; 0x7ca <vfprintf+0x272>
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <vfprintf+0x24a>
 79c:	88 35       	cpi	r24, 0x58	; 88
 79e:	79 f0       	breq	.+30     	; 0x7be <vfprintf+0x266>
 7a0:	b4 c0       	rjmp	.+360    	; 0x90a <vfprintf+0x3b2>
 7a2:	80 37       	cpi	r24, 0x70	; 112
 7a4:	19 f0       	breq	.+6      	; 0x7ac <vfprintf+0x254>
 7a6:	88 37       	cpi	r24, 0x78	; 120
 7a8:	21 f0       	breq	.+8      	; 0x7b2 <vfprintf+0x25a>
 7aa:	af c0       	rjmp	.+350    	; 0x90a <vfprintf+0x3b2>
 7ac:	2f 2f       	mov	r18, r31
 7ae:	20 61       	ori	r18, 0x10	; 16
 7b0:	b2 2e       	mov	r11, r18
 7b2:	b4 fe       	sbrs	r11, 4
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x278>
 7b6:	8b 2d       	mov	r24, r11
 7b8:	84 60       	ori	r24, 0x04	; 4
 7ba:	b8 2e       	mov	r11, r24
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x278>
 7be:	24 ff       	sbrs	r18, 4
 7c0:	0a c0       	rjmp	.+20     	; 0x7d6 <vfprintf+0x27e>
 7c2:	9f 2f       	mov	r25, r31
 7c4:	96 60       	ori	r25, 0x06	; 6
 7c6:	b9 2e       	mov	r11, r25
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x27e>
 7ca:	28 e0       	ldi	r18, 0x08	; 8
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	05 c0       	rjmp	.+10     	; 0x7da <vfprintf+0x282>
 7d0:	20 e1       	ldi	r18, 0x10	; 16
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0x282>
 7d6:	20 e1       	ldi	r18, 0x10	; 16
 7d8:	32 e0       	ldi	r19, 0x02	; 2
 7da:	f8 01       	movw	r30, r16
 7dc:	b7 fe       	sbrs	r11, 7
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <vfprintf+0x296>
 7e0:	60 81       	ld	r22, Z
 7e2:	71 81       	ldd	r23, Z+1	; 0x01
 7e4:	82 81       	ldd	r24, Z+2	; 0x02
 7e6:	93 81       	ldd	r25, Z+3	; 0x03
 7e8:	0c 5f       	subi	r16, 0xFC	; 252
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x2a2>
 7ee:	60 81       	ld	r22, Z
 7f0:	71 81       	ldd	r23, Z+1	; 0x01
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 5f       	subi	r16, 0xFE	; 254
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	a4 01       	movw	r20, r8
 7fc:	0e 94 ef 04 	call	0x9de	; 0x9de <__ultoa_invert>
 800:	a8 2e       	mov	r10, r24
 802:	a8 18       	sub	r10, r8
 804:	fb 2d       	mov	r31, r11
 806:	ff 77       	andi	r31, 0x7F	; 127
 808:	7f 2e       	mov	r7, r31
 80a:	76 fe       	sbrs	r7, 6
 80c:	0b c0       	rjmp	.+22     	; 0x824 <vfprintf+0x2cc>
 80e:	37 2d       	mov	r19, r7
 810:	3e 7f       	andi	r19, 0xFE	; 254
 812:	a5 14       	cp	r10, r5
 814:	50 f4       	brcc	.+20     	; 0x82a <vfprintf+0x2d2>
 816:	74 fe       	sbrs	r7, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x2d6>
 81a:	72 fc       	sbrc	r7, 2
 81c:	08 c0       	rjmp	.+16     	; 0x82e <vfprintf+0x2d6>
 81e:	37 2d       	mov	r19, r7
 820:	3e 7e       	andi	r19, 0xEE	; 238
 822:	05 c0       	rjmp	.+10     	; 0x82e <vfprintf+0x2d6>
 824:	ba 2c       	mov	r11, r10
 826:	37 2d       	mov	r19, r7
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x2d8>
 82a:	ba 2c       	mov	r11, r10
 82c:	01 c0       	rjmp	.+2      	; 0x830 <vfprintf+0x2d8>
 82e:	b5 2c       	mov	r11, r5
 830:	34 ff       	sbrs	r19, 4
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x2f6>
 834:	fe 01       	movw	r30, r28
 836:	ea 0d       	add	r30, r10
 838:	f1 1d       	adc	r31, r1
 83a:	80 81       	ld	r24, Z
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	11 f4       	brne	.+4      	; 0x844 <vfprintf+0x2ec>
 840:	39 7e       	andi	r19, 0xE9	; 233
 842:	09 c0       	rjmp	.+18     	; 0x856 <vfprintf+0x2fe>
 844:	32 ff       	sbrs	r19, 2
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x2fc>
 848:	b3 94       	inc	r11
 84a:	b3 94       	inc	r11
 84c:	04 c0       	rjmp	.+8      	; 0x856 <vfprintf+0x2fe>
 84e:	83 2f       	mov	r24, r19
 850:	86 78       	andi	r24, 0x86	; 134
 852:	09 f0       	breq	.+2      	; 0x856 <vfprintf+0x2fe>
 854:	b3 94       	inc	r11
 856:	33 fd       	sbrc	r19, 3
 858:	13 c0       	rjmp	.+38     	; 0x880 <vfprintf+0x328>
 85a:	30 ff       	sbrs	r19, 0
 85c:	06 c0       	rjmp	.+12     	; 0x86a <vfprintf+0x312>
 85e:	5a 2c       	mov	r5, r10
 860:	b3 14       	cp	r11, r3
 862:	18 f4       	brcc	.+6      	; 0x86a <vfprintf+0x312>
 864:	53 0c       	add	r5, r3
 866:	5b 18       	sub	r5, r11
 868:	b3 2c       	mov	r11, r3
 86a:	b3 14       	cp	r11, r3
 86c:	68 f4       	brcc	.+26     	; 0x888 <vfprintf+0x330>
 86e:	b7 01       	movw	r22, r14
 870:	80 e2       	ldi	r24, 0x20	; 32
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	3c 87       	std	Y+12, r19	; 0x0c
 876:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 87a:	b3 94       	inc	r11
 87c:	3c 85       	ldd	r19, Y+12	; 0x0c
 87e:	f5 cf       	rjmp	.-22     	; 0x86a <vfprintf+0x312>
 880:	b3 14       	cp	r11, r3
 882:	10 f4       	brcc	.+4      	; 0x888 <vfprintf+0x330>
 884:	3b 18       	sub	r3, r11
 886:	01 c0       	rjmp	.+2      	; 0x88a <vfprintf+0x332>
 888:	31 2c       	mov	r3, r1
 88a:	34 ff       	sbrs	r19, 4
 88c:	12 c0       	rjmp	.+36     	; 0x8b2 <vfprintf+0x35a>
 88e:	b7 01       	movw	r22, r14
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	3c 87       	std	Y+12, r19	; 0x0c
 896:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 89a:	3c 85       	ldd	r19, Y+12	; 0x0c
 89c:	32 ff       	sbrs	r19, 2
 89e:	17 c0       	rjmp	.+46     	; 0x8ce <vfprintf+0x376>
 8a0:	31 fd       	sbrc	r19, 1
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x352>
 8a4:	88 e7       	ldi	r24, 0x78	; 120
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x356>
 8aa:	88 e5       	ldi	r24, 0x58	; 88
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	b7 01       	movw	r22, r14
 8b0:	0c c0       	rjmp	.+24     	; 0x8ca <vfprintf+0x372>
 8b2:	83 2f       	mov	r24, r19
 8b4:	86 78       	andi	r24, 0x86	; 134
 8b6:	59 f0       	breq	.+22     	; 0x8ce <vfprintf+0x376>
 8b8:	31 ff       	sbrs	r19, 1
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0x368>
 8bc:	8b e2       	ldi	r24, 0x2B	; 43
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <vfprintf+0x36a>
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	37 fd       	sbrc	r19, 7
 8c4:	8d e2       	ldi	r24, 0x2D	; 45
 8c6:	b7 01       	movw	r22, r14
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 8ce:	a5 14       	cp	r10, r5
 8d0:	38 f4       	brcc	.+14     	; 0x8e0 <vfprintf+0x388>
 8d2:	b7 01       	movw	r22, r14
 8d4:	80 e3       	ldi	r24, 0x30	; 48
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 8dc:	5a 94       	dec	r5
 8de:	f7 cf       	rjmp	.-18     	; 0x8ce <vfprintf+0x376>
 8e0:	aa 94       	dec	r10
 8e2:	f4 01       	movw	r30, r8
 8e4:	ea 0d       	add	r30, r10
 8e6:	f1 1d       	adc	r31, r1
 8e8:	80 81       	ld	r24, Z
 8ea:	b7 01       	movw	r22, r14
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 8f2:	a1 10       	cpse	r10, r1
 8f4:	f5 cf       	rjmp	.-22     	; 0x8e0 <vfprintf+0x388>
 8f6:	33 20       	and	r3, r3
 8f8:	09 f4       	brne	.+2      	; 0x8fc <vfprintf+0x3a4>
 8fa:	51 ce       	rjmp	.-862    	; 0x59e <vfprintf+0x46>
 8fc:	b7 01       	movw	r22, r14
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 b7 04 	call	0x96e	; 0x96e <fputc>
 906:	3a 94       	dec	r3
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <vfprintf+0x39e>
 90a:	f7 01       	movw	r30, r14
 90c:	86 81       	ldd	r24, Z+6	; 0x06
 90e:	97 81       	ldd	r25, Z+7	; 0x07
 910:	02 c0       	rjmp	.+4      	; 0x916 <vfprintf+0x3be>
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	9f ef       	ldi	r25, 0xFF	; 255
 916:	2c 96       	adiw	r28, 0x0c	; 12
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	bf 90       	pop	r11
 92e:	af 90       	pop	r10
 930:	9f 90       	pop	r9
 932:	8f 90       	pop	r8
 934:	7f 90       	pop	r7
 936:	6f 90       	pop	r6
 938:	5f 90       	pop	r5
 93a:	4f 90       	pop	r4
 93c:	3f 90       	pop	r3
 93e:	2f 90       	pop	r2
 940:	08 95       	ret

00000942 <strnlen_P>:
 942:	fc 01       	movw	r30, r24
 944:	05 90       	lpm	r0, Z+
 946:	61 50       	subi	r22, 0x01	; 1
 948:	70 40       	sbci	r23, 0x00	; 0
 94a:	01 10       	cpse	r0, r1
 94c:	d8 f7       	brcc	.-10     	; 0x944 <strnlen_P+0x2>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	8e 0f       	add	r24, r30
 954:	9f 1f       	adc	r25, r31
 956:	08 95       	ret

00000958 <strnlen>:
 958:	fc 01       	movw	r30, r24
 95a:	61 50       	subi	r22, 0x01	; 1
 95c:	70 40       	sbci	r23, 0x00	; 0
 95e:	01 90       	ld	r0, Z+
 960:	01 10       	cpse	r0, r1
 962:	d8 f7       	brcc	.-10     	; 0x95a <strnlen+0x2>
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	8e 0f       	add	r24, r30
 96a:	9f 1f       	adc	r25, r31
 96c:	08 95       	ret

0000096e <fputc>:
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	fb 01       	movw	r30, r22
 978:	23 81       	ldd	r18, Z+3	; 0x03
 97a:	21 fd       	sbrc	r18, 1
 97c:	03 c0       	rjmp	.+6      	; 0x984 <fputc+0x16>
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	28 c0       	rjmp	.+80     	; 0x9d4 <fputc+0x66>
 984:	22 ff       	sbrs	r18, 2
 986:	16 c0       	rjmp	.+44     	; 0x9b4 <fputc+0x46>
 988:	46 81       	ldd	r20, Z+6	; 0x06
 98a:	57 81       	ldd	r21, Z+7	; 0x07
 98c:	24 81       	ldd	r18, Z+4	; 0x04
 98e:	35 81       	ldd	r19, Z+5	; 0x05
 990:	42 17       	cp	r20, r18
 992:	53 07       	cpc	r21, r19
 994:	44 f4       	brge	.+16     	; 0x9a6 <fputc+0x38>
 996:	a0 81       	ld	r26, Z
 998:	b1 81       	ldd	r27, Z+1	; 0x01
 99a:	9d 01       	movw	r18, r26
 99c:	2f 5f       	subi	r18, 0xFF	; 255
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	20 83       	st	Z, r18
 9a2:	31 83       	std	Z+1, r19	; 0x01
 9a4:	8c 93       	st	X, r24
 9a6:	26 81       	ldd	r18, Z+6	; 0x06
 9a8:	37 81       	ldd	r19, Z+7	; 0x07
 9aa:	2f 5f       	subi	r18, 0xFF	; 255
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	26 83       	std	Z+6, r18	; 0x06
 9b0:	37 83       	std	Z+7, r19	; 0x07
 9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <fputc+0x66>
 9b4:	eb 01       	movw	r28, r22
 9b6:	09 2f       	mov	r16, r25
 9b8:	18 2f       	mov	r17, r24
 9ba:	00 84       	ldd	r0, Z+8	; 0x08
 9bc:	f1 85       	ldd	r31, Z+9	; 0x09
 9be:	e0 2d       	mov	r30, r0
 9c0:	19 95       	eicall
 9c2:	89 2b       	or	r24, r25
 9c4:	e1 f6       	brne	.-72     	; 0x97e <fputc+0x10>
 9c6:	8e 81       	ldd	r24, Y+6	; 0x06
 9c8:	9f 81       	ldd	r25, Y+7	; 0x07
 9ca:	01 96       	adiw	r24, 0x01	; 1
 9cc:	8e 83       	std	Y+6, r24	; 0x06
 9ce:	9f 83       	std	Y+7, r25	; 0x07
 9d0:	81 2f       	mov	r24, r17
 9d2:	90 2f       	mov	r25, r16
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	08 95       	ret

000009de <__ultoa_invert>:
 9de:	fa 01       	movw	r30, r20
 9e0:	aa 27       	eor	r26, r26
 9e2:	28 30       	cpi	r18, 0x08	; 8
 9e4:	51 f1       	breq	.+84     	; 0xa3a <__ultoa_invert+0x5c>
 9e6:	20 31       	cpi	r18, 0x10	; 16
 9e8:	81 f1       	breq	.+96     	; 0xa4a <__ultoa_invert+0x6c>
 9ea:	e8 94       	clt
 9ec:	6f 93       	push	r22
 9ee:	6e 7f       	andi	r22, 0xFE	; 254
 9f0:	6e 5f       	subi	r22, 0xFE	; 254
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	af 4f       	sbci	r26, 0xFF	; 255
 9fa:	b1 e0       	ldi	r27, 0x01	; 1
 9fc:	3e d0       	rcall	.+124    	; 0xa7a <__ultoa_invert+0x9c>
 9fe:	b4 e0       	ldi	r27, 0x04	; 4
 a00:	3c d0       	rcall	.+120    	; 0xa7a <__ultoa_invert+0x9c>
 a02:	67 0f       	add	r22, r23
 a04:	78 1f       	adc	r23, r24
 a06:	89 1f       	adc	r24, r25
 a08:	9a 1f       	adc	r25, r26
 a0a:	a1 1d       	adc	r26, r1
 a0c:	68 0f       	add	r22, r24
 a0e:	79 1f       	adc	r23, r25
 a10:	8a 1f       	adc	r24, r26
 a12:	91 1d       	adc	r25, r1
 a14:	a1 1d       	adc	r26, r1
 a16:	6a 0f       	add	r22, r26
 a18:	71 1d       	adc	r23, r1
 a1a:	81 1d       	adc	r24, r1
 a1c:	91 1d       	adc	r25, r1
 a1e:	a1 1d       	adc	r26, r1
 a20:	20 d0       	rcall	.+64     	; 0xa62 <__ultoa_invert+0x84>
 a22:	09 f4       	brne	.+2      	; 0xa26 <__ultoa_invert+0x48>
 a24:	68 94       	set
 a26:	3f 91       	pop	r19
 a28:	2a e0       	ldi	r18, 0x0A	; 10
 a2a:	26 9f       	mul	r18, r22
 a2c:	11 24       	eor	r1, r1
 a2e:	30 19       	sub	r19, r0
 a30:	30 5d       	subi	r19, 0xD0	; 208
 a32:	31 93       	st	Z+, r19
 a34:	de f6       	brtc	.-74     	; 0x9ec <__ultoa_invert+0xe>
 a36:	cf 01       	movw	r24, r30
 a38:	08 95       	ret
 a3a:	46 2f       	mov	r20, r22
 a3c:	47 70       	andi	r20, 0x07	; 7
 a3e:	40 5d       	subi	r20, 0xD0	; 208
 a40:	41 93       	st	Z+, r20
 a42:	b3 e0       	ldi	r27, 0x03	; 3
 a44:	0f d0       	rcall	.+30     	; 0xa64 <__ultoa_invert+0x86>
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__ultoa_invert+0x5c>
 a48:	f6 cf       	rjmp	.-20     	; 0xa36 <__ultoa_invert+0x58>
 a4a:	46 2f       	mov	r20, r22
 a4c:	4f 70       	andi	r20, 0x0F	; 15
 a4e:	40 5d       	subi	r20, 0xD0	; 208
 a50:	4a 33       	cpi	r20, 0x3A	; 58
 a52:	18 f0       	brcs	.+6      	; 0xa5a <__ultoa_invert+0x7c>
 a54:	49 5d       	subi	r20, 0xD9	; 217
 a56:	31 fd       	sbrc	r19, 1
 a58:	40 52       	subi	r20, 0x20	; 32
 a5a:	41 93       	st	Z+, r20
 a5c:	02 d0       	rcall	.+4      	; 0xa62 <__ultoa_invert+0x84>
 a5e:	a9 f7       	brne	.-22     	; 0xa4a <__ultoa_invert+0x6c>
 a60:	ea cf       	rjmp	.-44     	; 0xa36 <__ultoa_invert+0x58>
 a62:	b4 e0       	ldi	r27, 0x04	; 4
 a64:	a6 95       	lsr	r26
 a66:	97 95       	ror	r25
 a68:	87 95       	ror	r24
 a6a:	77 95       	ror	r23
 a6c:	67 95       	ror	r22
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0x86>
 a72:	00 97       	sbiw	r24, 0x00	; 0
 a74:	61 05       	cpc	r22, r1
 a76:	71 05       	cpc	r23, r1
 a78:	08 95       	ret
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	0a 2e       	mov	r0, r26
 a80:	06 94       	lsr	r0
 a82:	57 95       	ror	r21
 a84:	47 95       	ror	r20
 a86:	37 95       	ror	r19
 a88:	27 95       	ror	r18
 a8a:	ba 95       	dec	r27
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__ultoa_invert+0xa2>
 a8e:	62 0f       	add	r22, r18
 a90:	73 1f       	adc	r23, r19
 a92:	84 1f       	adc	r24, r20
 a94:	95 1f       	adc	r25, r21
 a96:	a0 1d       	adc	r26, r0
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
