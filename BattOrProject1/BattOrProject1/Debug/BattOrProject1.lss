
BattOrProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  000011b6  0000124a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008020b6  008020b6  00001300  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b48  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc5  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c68  00000000  00000000  00004d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000059bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000980  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000868  00000000  00000000  0000667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_14>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 8e 03 	jmp	0x71c	; 0x71c <uart_putchar>
     200:	0c 94 ac 03 	jmp	0x758	; 0x758 <uart_getchar>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e6 eb       	ldi	r30, 0xB6	; 182
     21c:	f1 e1       	ldi	r31, 0x11	; 17
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a6 3b       	cpi	r26, 0xB6	; 182
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	20 e2       	ldi	r18, 0x20	; 32
     230:	a6 eb       	ldi	r26, 0xB6	; 182
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a4 3d       	cpi	r26, 0xD4	; 212
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
     242:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <blink_init>:
uint32_t lastTime;
volatile uint8_t fivemscounter;

//Initialize the state of all of the LEDs in local state of the blink library to have their blinks disabled. Also, setup a timer that will fire an interrupt once every millisecond. Note that the timer is clocked off of the peripheral clock, and the peripheral clock is clocked off of the system clock.
void blink_init(){
	timer_init(&TCC0, 0b11); //high interrupt level
     24a:	63 e0       	ldi	r22, 0x03	; 3
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	98 e0       	ldi	r25, 0x08	; 8
     250:	0e 94 c5 03 	call	0x78a	; 0x78a <timer_init>
	timer_set(&TCC0, 0b1, 2000); //2000 ticks corresponds to 1ms, as of 10/15 10:32pm
     254:	40 ed       	ldi	r20, 0xD0	; 208
     256:	57 e0       	ldi	r21, 0x07	; 7
     258:	61 e0       	ldi	r22, 0x01	; 1
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	98 e0       	ldi	r25, 0x08	; 8
     25e:	0e 94 cc 03 	call	0x798	; 0x798 <timer_set>
     262:	08 95       	ret

00000264 <__vector_14>:
}

ISR(TCC0_OVF_vect){
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	8f 93       	push	r24
     270:	9f 93       	push	r25
     272:	af 93       	push	r26
     274:	bf 93       	push	r27
	globalTime++;
     276:	80 91 c3 20 	lds	r24, 0x20C3
     27a:	90 91 c4 20 	lds	r25, 0x20C4
     27e:	a0 91 c5 20 	lds	r26, 0x20C5
     282:	b0 91 c6 20 	lds	r27, 0x20C6
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	a1 1d       	adc	r26, r1
     28a:	b1 1d       	adc	r27, r1
     28c:	80 93 c3 20 	sts	0x20C3, r24
     290:	90 93 c4 20 	sts	0x20C4, r25
     294:	a0 93 c5 20 	sts	0x20C5, r26
     298:	b0 93 c6 20 	sts	0x20C6, r27
	checkBlink ++;
     29c:	80 91 c2 20 	lds	r24, 0x20C2
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 c2 20 	sts	0x20C2, r24
}
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <blink_set>:

//Set the specified led to blink at the specified interval_ms.
void blink_set(uint8_t led, uint16_t interval_ms) {
     2b8:	e6 eb       	ldi	r30, 0xB6	; 182
     2ba:	f0 e2       	ldi	r31, 0x20	; 32
     2bc:	42 ec       	ldi	r20, 0xC2	; 194
     2be:	50 e2       	ldi	r21, 0x20	; 32
	uint8_t i = 0;
	for (uint8_t pos = 0b1; pos < 0b1000; pos = pos << 1) {
     2c0:	91 e0       	ldi	r25, 0x01	; 1
		if(pos & led) LEDArray[i].blinkInterval = interval_ms;
     2c2:	29 2f       	mov	r18, r25
     2c4:	28 23       	and	r18, r24
     2c6:	11 f0       	breq	.+4      	; 0x2cc <blink_set+0x14>
     2c8:	60 83       	st	Z, r22
     2ca:	71 83       	std	Z+1, r23	; 0x01
}

//Set the specified led to blink at the specified interval_ms.
void blink_set(uint8_t led, uint16_t interval_ms) {
	uint8_t i = 0;
	for (uint8_t pos = 0b1; pos < 0b1000; pos = pos << 1) {
     2cc:	99 0f       	add	r25, r25
     2ce:	34 96       	adiw	r30, 0x04	; 4
     2d0:	e4 17       	cp	r30, r20
     2d2:	f5 07       	cpc	r31, r21
     2d4:	b1 f7       	brne	.-20     	; 0x2c2 <blink_set+0xa>
		if(pos & led) LEDArray[i].blinkInterval = interval_ms;
		i++;
	}
}
     2d6:	08 95       	ret

000002d8 <blink_ms_timer_update>:

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	06 eb       	ldi	r16, 0xB6	; 182
     2ee:	10 e2       	ldi	r17, 0x20	; 32
     2f0:	c0 e0       	ldi	r28, 0x00	; 0
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
			if (lastTime < globalTime) {
				LEDArray[i].counter += (globalTime - lastTime); 
				}
			if (LEDArray[i].counter >= LEDArray[i].blinkInterval) {
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
				led_toggle(0b1 << (i));
     2f4:	ff 24       	eor	r15, r15
     2f6:	f3 94       	inc	r15
}

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
	for (uint8_t i = 0; i < 3; i++) {
		if (LEDArray[i].blinkInterval != 0) {
     2f8:	ec 2e       	mov	r14, r28
     2fa:	f8 01       	movw	r30, r16
     2fc:	80 81       	ld	r24, Z
     2fe:	91 81       	ldd	r25, Z+1	; 0x01
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	b9 f1       	breq	.+110    	; 0x372 <blink_ms_timer_update+0x9a>
			if (lastTime < globalTime) {
     304:	80 90 c7 20 	lds	r8, 0x20C7
     308:	90 90 c8 20 	lds	r9, 0x20C8
     30c:	a0 90 c9 20 	lds	r10, 0x20C9
     310:	b0 90 ca 20 	lds	r11, 0x20CA
     314:	40 91 c3 20 	lds	r20, 0x20C3
     318:	50 91 c4 20 	lds	r21, 0x20C4
     31c:	60 91 c5 20 	lds	r22, 0x20C5
     320:	70 91 c6 20 	lds	r23, 0x20C6
     324:	84 16       	cp	r8, r20
     326:	95 06       	cpc	r9, r21
     328:	a6 06       	cpc	r10, r22
     32a:	b7 06       	cpc	r11, r23
     32c:	90 f4       	brcc	.+36     	; 0x352 <blink_ms_timer_update+0x7a>
				LEDArray[i].counter += (globalTime - lastTime); 
     32e:	40 91 c3 20 	lds	r20, 0x20C3
     332:	50 91 c4 20 	lds	r21, 0x20C4
     336:	60 91 c5 20 	lds	r22, 0x20C5
     33a:	70 91 c6 20 	lds	r23, 0x20C6
     33e:	48 19       	sub	r20, r8
     340:	59 09       	sbc	r21, r9
     342:	6a 09       	sbc	r22, r10
     344:	7b 09       	sbc	r23, r11
     346:	22 81       	ldd	r18, Z+2	; 0x02
     348:	33 81       	ldd	r19, Z+3	; 0x03
     34a:	42 0f       	add	r20, r18
     34c:	53 1f       	adc	r21, r19
     34e:	42 83       	std	Z+2, r20	; 0x02
     350:	53 83       	std	Z+3, r21	; 0x03
				}
			if (LEDArray[i].counter >= LEDArray[i].blinkInterval) {
     352:	22 81       	ldd	r18, Z+2	; 0x02
     354:	33 81       	ldd	r19, Z+3	; 0x03
     356:	28 17       	cp	r18, r24
     358:	39 07       	cpc	r19, r25
     35a:	58 f0       	brcs	.+22     	; 0x372 <blink_ms_timer_update+0x9a>
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
     35c:	28 1b       	sub	r18, r24
     35e:	39 0b       	sbc	r19, r25
     360:	22 83       	std	Z+2, r18	; 0x02
     362:	33 83       	std	Z+3, r19	; 0x03
				led_toggle(0b1 << (i));
     364:	8f 2d       	mov	r24, r15
     366:	01 c0       	rjmp	.+2      	; 0x36a <blink_ms_timer_update+0x92>
     368:	88 0f       	add	r24, r24
     36a:	ea 94       	dec	r14
     36c:	ea f7       	brpl	.-6      	; 0x368 <blink_ms_timer_update+0x90>
     36e:	0e 94 ba 02 	call	0x574	; 0x574 <led_toggle>
     372:	21 96       	adiw	r28, 0x01	; 1
     374:	0c 5f       	subi	r16, 0xFC	; 252
     376:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

//Update the state of the LEDs when a timer interrupt has occurred. This is the lower half handler for the timer interrupt, and should only be called if there was an unhandled timer interrupt that has occurred.
void blink_ms_timer_update(){
	for (uint8_t i = 0; i < 3; i++) {
     378:	c3 30       	cpi	r28, 0x03	; 3
     37a:	d1 05       	cpc	r29, r1
     37c:	09 f0       	breq	.+2      	; 0x380 <blink_ms_timer_update+0xa8>
     37e:	bc cf       	rjmp	.-136    	; 0x2f8 <blink_ms_timer_update+0x20>
				LEDArray[i].counter = LEDArray[i].counter-LEDArray[i].blinkInterval;
				led_toggle(0b1 << (i));
			}
		}
	}
	lastTime = globalTime;
     380:	80 91 c3 20 	lds	r24, 0x20C3
     384:	90 91 c4 20 	lds	r25, 0x20C4
     388:	a0 91 c5 20 	lds	r26, 0x20C5
     38c:	b0 91 c6 20 	lds	r27, 0x20C6
     390:	80 93 c7 20 	sts	0x20C7, r24
     394:	90 93 c8 20 	sts	0x20C8, r25
     398:	a0 93 c9 20 	sts	0x20C9, r26
     39c:	b0 93 ca 20 	sts	0x20CA, r27
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	08 95       	ret

000003b6 <clock_switch_to_ext_crystal>:
#include "timer.h"
#include "blink.h"

void clock_switch_to_ext_crystal(){
	
	OSC.XOSCCTRL = 0b11001011;
     3b6:	e0 e5       	ldi	r30, 0x50	; 80
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	8b ec       	ldi	r24, 0xCB	; 203
     3bc:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = OSC.CTRL | 0b1000;
     3be:	80 81       	ld	r24, Z
     3c0:	88 60       	ori	r24, 0x08	; 8
     3c2:	80 83       	st	Z, r24
	while(!(OSC.STATUS & 0b1000)){
     3c4:	81 81       	ldd	r24, Z+1	; 0x01
     3c6:	83 ff       	sbrs	r24, 3
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <clock_switch_to_ext_crystal+0xe>
	}
	CPU_CCP = CCP_IOREG_gc;
     3ca:	88 ed       	ldi	r24, 0xD8	; 216
     3cc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b11; //Changes multiplexer to set source to external oscillator
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	80 93 40 00 	sts	0x0040, r24
     3d4:	08 95       	ret

000003d6 <pot_high_impedance_sdo>:
	spi_txrx(&SPIC, &writeEnable, NULL, 2);
	
	gpio_set_out(&PORTC, DIGIPOT_AMP_CS_PIN_gm, 1);
}

/*static*/ void pot_high_impedance_sdo(uint8_t pot_cs_pin){
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <pot_high_impedance_sdo+0xc>
     3e2:	1f 92       	push	r1
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	f8 2e       	mov	r15, r24
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
	else port->OUTCLR = pin;
     3ea:	00 e4       	ldi	r16, 0x40	; 64
     3ec:	16 e0       	ldi	r17, 0x06	; 6
     3ee:	f8 01       	movw	r30, r16
     3f0:	86 83       	std	Z+6, r24	; 0x06
	gpio_set_out(&PORTC, pot_cs_pin, 0); //Pull down CS
	
	uint32_t dataword = 0b10000000000000010000000000000000;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a1 e0       	ldi	r26, 0x01	; 1
     3f8:	b0 e8       	ldi	r27, 0x80	; 128
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	9a 83       	std	Y+2, r25	; 0x02
     3fe:	ab 83       	std	Y+3, r26	; 0x03
     400:	bc 83       	std	Y+4, r27	; 0x04
	spi_txrx(&SPIC, &dataword, NULL, 4);
     402:	24 e0       	ldi	r18, 0x04	; 4
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	be 01       	movw	r22, r28
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	80 ec       	ldi	r24, 0xC0	; 192
     412:	98 e0       	ldi	r25, 0x08	; 8
     414:	0e 94 4d 03 	call	0x69a	; 0x69a <spi_txrx>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
     418:	f8 01       	movw	r30, r16
     41a:	f5 82       	std	Z+5, r15	; 0x05
	
	gpio_set_out(&PORTC, pot_cs_pin, 1); //Pull up CS
}
     41c:	24 96       	adiw	r28, 0x04	; 4
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	de bf       	out	0x3e, r29	; 62
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	08 95       	ret

0000042e <digipot_init>:
#include <stdio.h>
#include "led.h"

//static void pot_high_nce_sdo(uint8_t pot_cs_pin);

void digipot_init(){
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	1f 92       	push	r1
     43a:	1f 92       	push	r1
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
	
	//Set chip select pins to output mode
	gpio_set_mode(&PORTC, DIGIPOT_AMP_CS_PIN_gm, 1);
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	68 e0       	ldi	r22, 0x08	; 8
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	96 e0       	ldi	r25, 0x06	; 6
     448:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	gpio_set_mode(&PORTC, 0b10000, 1);
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	
	//Set mode to SSbar
	gpio_set_mode(&PORTC, 0b10100000, 1); // set mosi out
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	60 ea       	ldi	r22, 0xA0	; 160
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	gpio_set_mode(&PORTC, 0b01000000, 0); // Set miso in
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	60 e4       	ldi	r22, 0x40	; 64
     468:	80 e4       	ldi	r24, 0x40	; 64
     46a:	96 e0       	ldi	r25, 0x06	; 6
     46c:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
     470:	00 e4       	ldi	r16, 0x40	; 64
     472:	16 e0       	ldi	r17, 0x06	; 6
     474:	68 94       	set
     476:	ff 24       	eor	r15, r15
     478:	f3 f8       	bld	r15, 3
     47a:	f8 01       	movw	r30, r16
     47c:	f5 82       	std	Z+5, r15	; 0x05
     47e:	80 e1       	ldi	r24, 0x10	; 16
     480:	85 83       	std	Z+5, r24	; 0x05
     482:	80 e4       	ldi	r24, 0x40	; 64
     484:	85 83       	std	Z+5, r24	; 0x05
	gpio_set_out(&PORTC, 0b1000000, 1);
	
	 //Enable register
	 //Turn to master mode
	 //Set to transmit least significant first
	SPIC_CTRL = 0b01010111; //Rising, setup and falling sample
     486:	87 e5       	ldi	r24, 0x57	; 87
     488:	80 93 c0 08 	sts	0x08C0, r24
	
	//Set miso to input again
	gpio_set_mode(&PORTC, 0b01000000, 0); 
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	60 e4       	ldi	r22, 0x40	; 64
     490:	80 e4       	ldi	r24, 0x40	; 64
     492:	96 e0       	ldi	r25, 0x06	; 6
     494:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	
	pot_high_impedance_sdo(DIGIPOT_AMP_CS_PIN_gm);
     498:	88 e0       	ldi	r24, 0x08	; 8
     49a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <pot_high_impedance_sdo>
	else port->OUTCLR = pin;
     49e:	f8 01       	movw	r30, r16
     4a0:	f6 82       	std	Z+6, r15	; 0x06
	
	gpio_set_out(&PORTC, DIGIPOT_AMP_CS_PIN_gm, 0);
	
	uint16_t writeEnable =  0b0001110000000010;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	9c e1       	ldi	r25, 0x1C	; 28
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	9a 83       	std	Y+2, r25	; 0x02
	spi_txrx(&SPIC, &writeEnable, NULL, 2);
     4aa:	22 e0       	ldi	r18, 0x02	; 2
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	be 01       	movw	r22, r28
     4b4:	6f 5f       	subi	r22, 0xFF	; 255
     4b6:	7f 4f       	sbci	r23, 0xFF	; 255
     4b8:	80 ec       	ldi	r24, 0xC0	; 192
     4ba:	98 e0       	ldi	r25, 0x08	; 8
     4bc:	0e 94 4d 03 	call	0x69a	; 0x69a <spi_txrx>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
     4c0:	f8 01       	movw	r30, r16
     4c2:	f5 82       	std	Z+5, r15	; 0x05
	
	gpio_set_out(&PORTC, DIGIPOT_AMP_CS_PIN_gm, 1);
}
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	08 95       	ret

000004d4 <pot_wiperpos_set>:
	printf("returnable: %d \n\r", returnable);
	return returnable;
}

//Write the wiper position (0 - 1023) of the potentiometer which has its CS pin connected to pot_cs_pin.
void pot_wiperpos_set(uint8_t pot_cs_pin, uint16_t pos){
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	1f 92       	push	r1
     4e0:	1f 92       	push	r1
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	18 2f       	mov	r17, r24
	else port->OUTCLR = pin;
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f0 e4       	ldi	r31, 0x40	; 64
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f6 e0       	ldi	r31, 0x06	; 6
     4f0:	ff 2e       	mov	r15, r31
     4f2:	f0 2d       	mov	r31, r0
     4f4:	f7 01       	movw	r30, r14
     4f6:	86 83       	std	Z+6, r24	; 0x06
	gpio_set_out(&PORTC, pot_cs_pin, 0); //Pull down CS

	uint16_t command = 0b00010000000000 | pos;
     4f8:	74 60       	ori	r23, 0x04	; 4
     4fa:	69 83       	std	Y+1, r22	; 0x01
     4fc:	7a 83       	std	Y+2, r23	; 0x02
	spi_txrx(&SPIC, &command , NULL, 2);
     4fe:	22 e0       	ldi	r18, 0x02	; 2
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6f 5f       	subi	r22, 0xFF	; 255
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	80 ec       	ldi	r24, 0xC0	; 192
     50e:	98 e0       	ldi	r25, 0x08	; 8
     510:	0e 94 4d 03 	call	0x69a	; 0x69a <spi_txrx>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
     514:	f7 01       	movw	r30, r14
     516:	15 83       	std	Z+5, r17	; 0x05

	gpio_set_out(&PORTC, pot_cs_pin, 1); //Pull up CS
	
	pot_high_impedance_sdo(pot_cs_pin);
     518:	81 2f       	mov	r24, r17
     51a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <pot_high_impedance_sdo>
	
	//printf("hullo");
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <gpio_set_mode>:
#include <stdint.h>
#include <avr/io.h>

//Set the specified pin on the specified port to be in output (1) or input (0) mode.
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in){
  if(out_or_in) port->DIRSET = pin;
     52e:	44 23       	and	r20, r20
     530:	19 f0       	breq	.+6      	; 0x538 <gpio_set_mode+0xa>
     532:	fc 01       	movw	r30, r24
     534:	61 83       	std	Z+1, r22	; 0x01
     536:	08 95       	ret
  else port->DIRCLR = pin;
     538:	fc 01       	movw	r30, r24
     53a:	62 83       	std	Z+2, r22	; 0x02
     53c:	08 95       	ret

0000053e <led_init>:
	}
};

//Setup all of the LEDs so they are in output mode and off.
void led_init(){
	gpio_set_mode(&PORTC, LED_GREEN_bm, 1);
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	96 e0       	ldi	r25, 0x06	; 6
     546:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	gpio_set_mode(&PORTC, LED_YELLOW_bm, 1);
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
	gpio_set_mode(&PORTC, LED_RED_bm, 1);
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	64 e0       	ldi	r22, 0x04	; 4
     55a:	80 e4       	ldi	r24, 0x40	; 64
     55c:	96 e0       	ldi	r25, 0x06	; 6
     55e:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
     562:	e0 e4       	ldi	r30, 0x40	; 64
     564:	f6 e0       	ldi	r31, 0x06	; 6
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	85 83       	std	Z+5, r24	; 0x05
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	85 83       	std	Z+5, r24	; 0x05
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	85 83       	std	Z+5, r24	; 0x05
     572:	08 95       	ret

00000574 <led_toggle>:
	else port->OUTCLR = pin;
}

//If the specified pin on the specified port is in output mode, toggle the pin’s state (if 1 then 0, if 0 then 1).
inline void gpio_toggle_out(PORT_t* port, uint8_t pin){
	port->OUTTGL=pin;
     574:	80 93 47 06 	sts	0x0647, r24
     578:	08 95       	ret

0000057a <main>:
volatile uint8_t checkBlink;
uint32_t lastTime;

int main(void)
{
	sei();
     57a:	78 94       	sei
	PMIC.CTRL = PMIC.CTRL | 0b111;
     57c:	e0 ea       	ldi	r30, 0xA0	; 160
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	87 60       	ori	r24, 0x07	; 7
     584:	82 83       	std	Z+2, r24	; 0x02
	
	
	led_init();
     586:	0e 94 9f 02 	call	0x53e	; 0x53e <led_init>
	blink_init();
     58a:	0e 94 25 01 	call	0x24a	; 0x24a <blink_init>
	
	blink_set(LED_GREEN_bm, 100);
     58e:	64 e6       	ldi	r22, 0x64	; 100
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	blink_set(LED_YELLOW_bm, 250);
     598:	6a ef       	ldi	r22, 0xFA	; 250
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	blink_set(LED_RED_bm, 500);
     5a2:	64 ef       	ldi	r22, 0xF4	; 244
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <blink_set>
	
	clock_switch_to_ext_crystal();
     5ac:	0e 94 db 01 	call	0x3b6	; 0x3b6 <clock_switch_to_ext_crystal>
	
	uart_init();
     5b0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <uart_init>
	stdinout_init();
     5b4:	0e 94 ba 03 	call	0x774	; 0x774 <stdinout_init>
	digipot_init();
     5b8:	0e 94 17 02 	call	0x42e	; 0x42e <digipot_init>
	pot_wiperpos_set(DIGIPOT_AMP_CS_PIN_gm, 1023);
     5bc:	6f ef       	ldi	r22, 0xFF	; 255
     5be:	73 e0       	ldi	r23, 0x03	; 3
     5c0:	88 e0       	ldi	r24, 0x08	; 8
     5c2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <pot_wiperpos_set>
		//pot_wiperpos_get(DIGIPOT_AMP_CS_PIN_gm);
		printf("Enter your desired resistance in Ohms... \n");
		char* responseString;
		gets(responseString);
		long desiredResistance = strtol(responseString, NULL, 10);
		printf("\t You requested %ld ohms.\n",desiredResistance);
     5c6:	08 e3       	ldi	r16, 0x38	; 56
     5c8:	10 e2       	ldi	r17, 0x20	; 32
		uint16_t toSend = ((desiredResistance*1024)/100000)-1;
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f0 ea       	ldi	r31, 0xA0	; 160
     5ce:	8f 2e       	mov	r8, r31
     5d0:	f6 e8       	ldi	r31, 0x86	; 134
     5d2:	9f 2e       	mov	r9, r31
     5d4:	aa 24       	eor	r10, r10
     5d6:	a3 94       	inc	r10
     5d8:	b1 2c       	mov	r11, r1
     5da:	f0 2d       	mov	r31, r0
		printf("\t The best I can give is %ld. But at least you're not a processor reduced to a paltry resistor. \n", (97656 * (toSend+1) / 1000));
     5dc:	0f 2e       	mov	r0, r31
     5de:	f8 ee       	ldi	r31, 0xE8	; 232
     5e0:	4f 2e       	mov	r4, r31
     5e2:	f3 e0       	ldi	r31, 0x03	; 3
     5e4:	5f 2e       	mov	r5, r31
     5e6:	61 2c       	mov	r6, r1
     5e8:	71 2c       	mov	r7, r1
     5ea:	f0 2d       	mov	r31, r0
     5ec:	c3 e5       	ldi	r28, 0x53	; 83
     5ee:	d0 e2       	ldi	r29, 0x20	; 32
	
	while (1)
    {
		
		//pot_wiperpos_get(DIGIPOT_AMP_CS_PIN_gm);
		printf("Enter your desired resistance in Ohms... \n");
     5f0:	8e e0       	ldi	r24, 0x0E	; 14
     5f2:	90 e2       	ldi	r25, 0x20	; 32
     5f4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <puts>
		char* responseString;
		gets(responseString);
     5f8:	e1 2c       	mov	r14, r1
     5fa:	f1 2c       	mov	r15, r1
     5fc:	c7 01       	movw	r24, r14
     5fe:	0e 94 89 05 	call	0xb12	; 0xb12 <gets>
		long desiredResistance = strtol(responseString, NULL, 10);
     602:	4a e0       	ldi	r20, 0x0A	; 10
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	c7 01       	movw	r24, r14
     60c:	0e 94 55 04 	call	0x8aa	; 0x8aa <strtol>
     610:	6b 01       	movw	r12, r22
     612:	7c 01       	movw	r14, r24
		printf("\t You requested %ld ohms.\n",desiredResistance);
     614:	ff 92       	push	r15
     616:	ef 92       	push	r14
     618:	df 92       	push	r13
     61a:	6f 93       	push	r22
     61c:	1f 93       	push	r17
     61e:	0f 93       	push	r16
     620:	0e 94 b3 05 	call	0xb66	; 0xb66 <printf>
		uint16_t toSend = ((desiredResistance*1024)/100000)-1;
     624:	c7 01       	movw	r24, r14
     626:	b6 01       	movw	r22, r12
     628:	05 2e       	mov	r0, r21
     62a:	5a e0       	ldi	r21, 0x0A	; 10
     62c:	66 0f       	add	r22, r22
     62e:	77 1f       	adc	r23, r23
     630:	88 1f       	adc	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	5a 95       	dec	r21
     636:	d1 f7       	brne	.-12     	; 0x62c <main+0xb2>
     638:	50 2d       	mov	r21, r0
     63a:	a5 01       	movw	r20, r10
     63c:	94 01       	movw	r18, r8
     63e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divmodsi4>
     642:	69 01       	movw	r12, r18
     644:	7a 01       	movw	r14, r20
		printf("\t The best I can give is %ld. But at least you're not a processor reduced to a paltry resistor. \n", (97656 * (toSend+1) / 1000));
     646:	44 27       	eor	r20, r20
     648:	55 27       	eor	r21, r21
     64a:	68 e7       	ldi	r22, 0x78	; 120
     64c:	7d e7       	ldi	r23, 0x7D	; 125
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulsi3>
     656:	a3 01       	movw	r20, r6
     658:	92 01       	movw	r18, r4
     65a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divmodsi4>
     65e:	5f 93       	push	r21
     660:	4f 93       	push	r20
     662:	3f 93       	push	r19
     664:	2f 93       	push	r18
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	0e 94 b3 05 	call	0xb66	; 0xb66 <printf>
		printf("Enter your desired resistance in Ohms... \n");
		char* responseString;
		gets(responseString);
		long desiredResistance = strtol(responseString, NULL, 10);
		printf("\t You requested %ld ohms.\n",desiredResistance);
		uint16_t toSend = ((desiredResistance*1024)/100000)-1;
     66e:	b6 01       	movw	r22, r12
     670:	61 50       	subi	r22, 0x01	; 1
     672:	71 09       	sbc	r23, r1
		printf("\t The best I can give is %ld. But at least you're not a processor reduced to a paltry resistor. \n", (97656 * (toSend+1) / 1000));
		pot_wiperpos_set(DIGIPOT_AMP_CS_PIN_gm, toSend);
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <pot_wiperpos_set>
		
		
		if(checkBlink >= 5) {
     67a:	80 91 c2 20 	lds	r24, 0x20C2
     67e:	2d b7       	in	r18, 0x3d	; 61
     680:	3e b7       	in	r19, 0x3e	; 62
     682:	24 5f       	subi	r18, 0xF4	; 244
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	2d bf       	out	0x3d, r18	; 61
     688:	3e bf       	out	0x3e, r19	; 62
     68a:	85 30       	cpi	r24, 0x05	; 5
     68c:	08 f4       	brcc	.+2      	; 0x690 <main+0x116>
     68e:	b0 cf       	rjmp	.-160    	; 0x5f0 <main+0x76>
			blink_ms_timer_update();
     690:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <blink_ms_timer_update>
			checkBlink = 0;
     694:	10 92 c2 20 	sts	0x20C2, r1
     698:	ab cf       	rjmp	.-170    	; 0x5f0 <main+0x76>

0000069a <spi_txrx>:
#include <avr/io.h>
#include <stdint.h>
#include <stdio.h>

void spi_txrx(SPI_t* spi, void* txd, void* rxd, uint16_t len){	
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	fc 01       	movw	r30, r24
	
	// Case, want to both send and receive
	if(rxd != NULL && txd != NULL){
     6a0:	41 15       	cp	r20, r1
     6a2:	51 05       	cpc	r21, r1
     6a4:	c1 f0       	breq	.+48     	; 0x6d6 <spi_txrx+0x3c>
     6a6:	61 15       	cp	r22, r1
     6a8:	71 05       	cpc	r23, r1
     6aa:	31 f1       	breq	.+76     	; 0x6f8 <spi_txrx+0x5e>
		for(int i = len-1; i >= 0; i--){
     6ac:	d9 01       	movw	r26, r18
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	92 f1       	brmi	.+100    	; 0x716 <spi_txrx+0x7c>
     6b2:	62 0f       	add	r22, r18
     6b4:	73 1f       	adc	r23, r19
     6b6:	24 0f       	add	r18, r20
     6b8:	35 1f       	adc	r19, r21
			spi->DATA = ((uint8_t*)txd)[i];
     6ba:	eb 01       	movw	r28, r22
     6bc:	8a 91       	ld	r24, -Y
     6be:	be 01       	movw	r22, r28
     6c0:	83 83       	std	Z+3, r24	; 0x03
			
			while(spi->STATUS == 0){
     6c2:	92 81       	ldd	r25, Z+2	; 0x02
     6c4:	99 23       	and	r25, r25
     6c6:	e9 f3       	breq	.-6      	; 0x6c2 <spi_txrx+0x28>
			}
			((uint8_t*)rxd)[i] = spi->DATA;
     6c8:	83 81       	ldd	r24, Z+3	; 0x03
     6ca:	e9 01       	movw	r28, r18
     6cc:	8a 93       	st	-Y, r24
     6ce:	9e 01       	movw	r18, r28

void spi_txrx(SPI_t* spi, void* txd, void* rxd, uint16_t len){	
	
	// Case, want to both send and receive
	if(rxd != NULL && txd != NULL){
		for(int i = len-1; i >= 0; i--){
     6d0:	11 97       	sbiw	r26, 0x01	; 1
     6d2:	9a f7       	brpl	.-26     	; 0x6ba <spi_txrx+0x20>
     6d4:	20 c0       	rjmp	.+64     	; 0x716 <spi_txrx+0x7c>
		}
	}
	
	//Case, just want to send
	else if(rxd == NULL){
		for(int i = len-1; i >= 0; i--){
     6d6:	a9 01       	movw	r20, r18
     6d8:	41 50       	subi	r20, 0x01	; 1
     6da:	51 09       	sbc	r21, r1
     6dc:	e2 f0       	brmi	.+56     	; 0x716 <spi_txrx+0x7c>
     6de:	eb 01       	movw	r28, r22
     6e0:	c2 0f       	add	r28, r18
     6e2:	d3 1f       	adc	r29, r19
			//printf("--> %d \n\r",((uint8_t*)txd)[i]);
			spi->DATA = ((uint8_t*)txd)[i];
     6e4:	8a 91       	ld	r24, -Y
     6e6:	83 83       	std	Z+3, r24	; 0x03
			
			while(spi->STATUS == 0){
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	88 23       	and	r24, r24
     6ec:	e9 f3       	breq	.-6      	; 0x6e8 <spi_txrx+0x4e>
			}
			
			spi->DATA;
     6ee:	83 81       	ldd	r24, Z+3	; 0x03
		}
	}
	
	//Case, just want to send
	else if(rxd == NULL){
		for(int i = len-1; i >= 0; i--){
     6f0:	41 50       	subi	r20, 0x01	; 1
     6f2:	51 09       	sbc	r21, r1
     6f4:	ba f7       	brpl	.-18     	; 0x6e4 <spi_txrx+0x4a>
     6f6:	0f c0       	rjmp	.+30     	; 0x716 <spi_txrx+0x7c>
		}
	}
	
	//Case, just want to receive
	else if(txd == NULL){
		for(int i = 0; i < len; i++){
     6f8:	21 15       	cp	r18, r1
     6fa:	31 05       	cpc	r19, r1
     6fc:	61 f0       	breq	.+24     	; 0x716 <spi_txrx+0x7c>
     6fe:	da 01       	movw	r26, r20
     700:	24 0f       	add	r18, r20
     702:	35 1f       	adc	r19, r21
			spi->DATA = 0x0;
     704:	13 82       	std	Z+3, r1	; 0x03
			((uint8_t*)rxd)[i] = spi->DATA;
     706:	83 81       	ldd	r24, Z+3	; 0x03
     708:	8d 93       	st	X+, r24
			while(spi->STATUS == 0){
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	88 23       	and	r24, r24
     70e:	e9 f3       	breq	.-6      	; 0x70a <spi_txrx+0x70>
		}
	}
	
	//Case, just want to receive
	else if(txd == NULL){
		for(int i = 0; i < len; i++){
     710:	a2 17       	cp	r26, r18
     712:	b3 07       	cpc	r27, r19
     714:	b9 f7       	brne	.-18     	; 0x704 <spi_txrx+0x6a>
			while(spi->STATUS == 0){
			}
		}
	}

}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <uart_putchar>:
//Configure the USART D0 peripheral to operate at 1 Mbit/s baud, with 8 bit characters, one start bit and one stop bit, and no parity bits.
void uart_init();

//Transmit the specified byte called data over the UART bus. This function will complete when the byte has been fully transmitted.
inline void uart_tx_byte(uint8_t data){
  while(!(USARTD0.STATUS & USART_DREIF_bm)){} //Pause until ReadyToSend bit goes high
     71c:	e0 ea       	ldi	r30, 0xA0	; 160
     71e:	f9 e0       	ldi	r31, 0x09	; 9
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	95 ff       	sbrs	r25, 5
     724:	fd cf       	rjmp	.-6      	; 0x720 <uart_putchar+0x4>
  USARTD0.DATA = data;
     726:	80 93 a0 09 	sts	0x09A0, r24
  while(!(USARTD0.STATUS & USART_TXCIF_bm)){} //Pause until Done Sending bit goes high
     72a:	e0 ea       	ldi	r30, 0xA0	; 160
     72c:	f9 e0       	ldi	r31, 0x09	; 9
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	96 ff       	sbrs	r25, 6
     732:	fd cf       	rjmp	.-6      	; 0x72e <uart_putchar+0x12>
#include "uart.h"
#include <stdio.h>

int uart_putchar(char c, FILE* stream){
	uart_tx_byte(c);
	if(c == '\n') uart_tx_byte('\r');
     734:	8a 30       	cpi	r24, 0x0A	; 10
     736:	69 f4       	brne	.+26     	; 0x752 <uart_putchar+0x36>
//Configure the USART D0 peripheral to operate at 1 Mbit/s baud, with 8 bit characters, one start bit and one stop bit, and no parity bits.
void uart_init();

//Transmit the specified byte called data over the UART bus. This function will complete when the byte has been fully transmitted.
inline void uart_tx_byte(uint8_t data){
  while(!(USARTD0.STATUS & USART_DREIF_bm)){} //Pause until ReadyToSend bit goes high
     738:	e0 ea       	ldi	r30, 0xA0	; 160
     73a:	f9 e0       	ldi	r31, 0x09	; 9
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	85 ff       	sbrs	r24, 5
     740:	fd cf       	rjmp	.-6      	; 0x73c <uart_putchar+0x20>
  USARTD0.DATA = data;
     742:	8d e0       	ldi	r24, 0x0D	; 13
     744:	80 93 a0 09 	sts	0x09A0, r24
  while(!(USARTD0.STATUS & USART_TXCIF_bm)){} //Pause until Done Sending bit goes high
     748:	e0 ea       	ldi	r30, 0xA0	; 160
     74a:	f9 e0       	ldi	r31, 0x09	; 9
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	86 ff       	sbrs	r24, 6
     750:	fd cf       	rjmp	.-6      	; 0x74c <uart_putchar+0x30>
	return 0;
}
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	08 95       	ret

00000758 <uart_getchar>:
}
  
//Receive the specified byte called data over the UART bus. This function will complete when one byte has been fully received.
inline uint8_t uart_rx_byte(){
  while(!(USARTD0.STATUS & USART_RXCIF_bm)){} //Pause until data ready bit goes high
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	88 23       	and	r24, r24
     760:	ec f7       	brge	.-6      	; 0x75c <uart_getchar+0x4>
  return USARTD0.DATA;
     762:	80 91 a0 09 	lds	r24, 0x09A0

int uart_getchar(FILE* stream){
	char c = uart_rx_byte();
	return (c == '\r') ? '\n' : c;
     766:	8d 30       	cpi	r24, 0x0D	; 13
     768:	11 f0       	breq	.+4      	; 0x76e <uart_getchar+0x16>
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	08 95       	ret
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	90 e0       	ldi	r25, 0x00	; 0
}
     772:	08 95       	ret

00000774 <stdinout_init>:

void stdinout_init(){
	uart_init();
     774:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <uart_init>

	static FILE uart_stream = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

	stdout = &uart_stream;
     778:	ec ec       	ldi	r30, 0xCC	; 204
     77a:	f0 e2       	ldi	r31, 0x20	; 32
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e2       	ldi	r25, 0x20	; 32
     780:	82 83       	std	Z+2, r24	; 0x02
     782:	93 83       	std	Z+3, r25	; 0x03
	stdin = &uart_stream;
     784:	80 83       	st	Z, r24
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	08 95       	ret

0000078a <timer_init>:
#include <stdint.h>
#include <avr/io.h>
#include "gpio.h"

//Setup the specified timer peripheral. Clear out any timer state and reset all counters. Set it to have the specified interrupt_level.
void timer_init(TC0_t* timer, uint8_t int_level){
     78a:	fc 01       	movw	r30, r24
	timer->CTRLFSET = timer->CTRLFSET | 0b1000; //Executes reset command on CTRLFSet, see p179
     78c:	81 85       	ldd	r24, Z+9	; 0x09
     78e:	88 60       	ori	r24, 0x08	; 8
     790:	81 87       	std	Z+9, r24	; 0x09
	timer->INTCTRLA = 0b1 & int_level; //Enables overflow interrupt. See p134.
     792:	61 70       	andi	r22, 0x01	; 1
     794:	66 83       	std	Z+6, r22	; 0x06
     796:	08 95       	ret

00000798 <timer_set>:
	setBit(timer->CTRLFSET, 0b1000, 1); //Executes restart command on CTRLFSet, see p179
}

//Takes in period as time in microseconds between every overflow interrupt.
void timer_set(TC0_t* timer, uint8_t prescaler, uint16_t period){
	timer->CTRLA = (0b00000111 & prescaler); //Set prescaler by setting lower 3 bits of CLKSel;
     798:	67 70       	andi	r22, 0x07	; 7
     79a:	fc 01       	movw	r30, r24
     79c:	60 83       	st	Z, r22
	timer->PER = period;
     79e:	46 a3       	std	Z+38, r20	; 0x26
     7a0:	57 a3       	std	Z+39, r21	; 0x27
     7a2:	08 95       	ret

000007a4 <uart_init>:
#include "gpio.h"
#include <avr/io.h>
#include <stdio.h>

void uart_init(){
  gpio_set_mode(&PORTD, 0b100, 0);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	64 e0       	ldi	r22, 0x04	; 4
     7a8:	80 e6       	ldi	r24, 0x60	; 96
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
  gpio_set_mode(&PORTD, 0b1000, 1);
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	68 e0       	ldi	r22, 0x08	; 8
     7b4:	80 e6       	ldi	r24, 0x60	; 96
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	0e 94 97 02 	call	0x52e	; 0x52e <gpio_set_mode>
void gpio_set_mode(PORT_t* port, uint8_t pin, uint8_t out_or_in);
//Set the specified pin on the specified port to be in output (1) or input (0) mode.

//If the specified pin on the specified port is in output mode, set the output of that pin to be on (1) or off (0).
inline void gpio_set_out(PORT_t* port, uint8_t pin, uint8_t on_or_off){
	if(on_or_off) port->OUTSET = pin;
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	80 93 65 06 	sts	0x0665, r24
  gpio_set_out(&PORTD, 0b1000, 1);
  USARTD0.CTRLB = 0b00011000; //Initialize UART
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	88 e1       	ldi	r24, 0x18	; 24
     7c8:	84 83       	std	Z+4, r24	; 0x04
  USARTD0.CTRLC = 0b00000011; //Set UART start, stop, parity, # data bits
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	85 83       	std	Z+5, r24	; 0x05
  USARTD0.BAUDCTRLA = 0b00000000; //This and next line set baud rate to f_clk/16, or 1MHz
     7ce:	16 82       	std	Z+6, r1	; 0x06
  USARTD0.BAUDCTRLB = 0b00000000;
     7d0:	17 82       	std	Z+7, r1	; 0x07
     7d2:	08 95       	ret

000007d4 <__mulsi3>:
     7d4:	db 01       	movw	r26, r22
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	0e 94 19 04 	call	0x832	; 0x832 <__muluhisi3>
     7de:	bf 91       	pop	r27
     7e0:	af 91       	pop	r26
     7e2:	a2 9f       	mul	r26, r18
     7e4:	80 0d       	add	r24, r0
     7e6:	91 1d       	adc	r25, r1
     7e8:	a3 9f       	mul	r26, r19
     7ea:	90 0d       	add	r25, r0
     7ec:	b2 9f       	mul	r27, r18
     7ee:	90 0d       	add	r25, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	08 95       	ret

000007f4 <__divmodsi4>:
     7f4:	05 2e       	mov	r0, r21
     7f6:	97 fb       	bst	r25, 7
     7f8:	1e f4       	brtc	.+6      	; 0x800 <__divmodsi4+0xc>
     7fa:	00 94       	com	r0
     7fc:	0e 94 11 04 	call	0x822	; 0x822 <__negsi2>
     800:	57 fd       	sbrc	r21, 7
     802:	07 d0       	rcall	.+14     	; 0x812 <__divmodsi4_neg2>
     804:	0e 94 24 04 	call	0x848	; 0x848 <__udivmodsi4>
     808:	07 fc       	sbrc	r0, 7
     80a:	03 d0       	rcall	.+6      	; 0x812 <__divmodsi4_neg2>
     80c:	4e f4       	brtc	.+18     	; 0x820 <__divmodsi4_exit>
     80e:	0c 94 11 04 	jmp	0x822	; 0x822 <__negsi2>

00000812 <__divmodsi4_neg2>:
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255

00000820 <__divmodsi4_exit>:
     820:	08 95       	ret

00000822 <__negsi2>:
     822:	90 95       	com	r25
     824:	80 95       	com	r24
     826:	70 95       	com	r23
     828:	61 95       	neg	r22
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	8f 4f       	sbci	r24, 0xFF	; 255
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	08 95       	ret

00000832 <__muluhisi3>:
     832:	0e 94 46 04 	call	0x88c	; 0x88c <__umulhisi3>
     836:	a5 9f       	mul	r26, r21
     838:	90 0d       	add	r25, r0
     83a:	b4 9f       	mul	r27, r20
     83c:	90 0d       	add	r25, r0
     83e:	a4 9f       	mul	r26, r20
     840:	80 0d       	add	r24, r0
     842:	91 1d       	adc	r25, r1
     844:	11 24       	eor	r1, r1
     846:	08 95       	ret

00000848 <__udivmodsi4>:
     848:	a1 e2       	ldi	r26, 0x21	; 33
     84a:	1a 2e       	mov	r1, r26
     84c:	aa 1b       	sub	r26, r26
     84e:	bb 1b       	sub	r27, r27
     850:	fd 01       	movw	r30, r26
     852:	0d c0       	rjmp	.+26     	; 0x86e <__udivmodsi4_ep>

00000854 <__udivmodsi4_loop>:
     854:	aa 1f       	adc	r26, r26
     856:	bb 1f       	adc	r27, r27
     858:	ee 1f       	adc	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	a2 17       	cp	r26, r18
     85e:	b3 07       	cpc	r27, r19
     860:	e4 07       	cpc	r30, r20
     862:	f5 07       	cpc	r31, r21
     864:	20 f0       	brcs	.+8      	; 0x86e <__udivmodsi4_ep>
     866:	a2 1b       	sub	r26, r18
     868:	b3 0b       	sbc	r27, r19
     86a:	e4 0b       	sbc	r30, r20
     86c:	f5 0b       	sbc	r31, r21

0000086e <__udivmodsi4_ep>:
     86e:	66 1f       	adc	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	88 1f       	adc	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	1a 94       	dec	r1
     878:	69 f7       	brne	.-38     	; 0x854 <__udivmodsi4_loop>
     87a:	60 95       	com	r22
     87c:	70 95       	com	r23
     87e:	80 95       	com	r24
     880:	90 95       	com	r25
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	bd 01       	movw	r22, r26
     888:	cf 01       	movw	r24, r30
     88a:	08 95       	ret

0000088c <__umulhisi3>:
     88c:	a2 9f       	mul	r26, r18
     88e:	b0 01       	movw	r22, r0
     890:	b3 9f       	mul	r27, r19
     892:	c0 01       	movw	r24, r0
     894:	a3 9f       	mul	r26, r19
     896:	70 0d       	add	r23, r0
     898:	81 1d       	adc	r24, r1
     89a:	11 24       	eor	r1, r1
     89c:	91 1d       	adc	r25, r1
     89e:	b2 9f       	mul	r27, r18
     8a0:	70 0d       	add	r23, r0
     8a2:	81 1d       	adc	r24, r1
     8a4:	11 24       	eor	r1, r1
     8a6:	91 1d       	adc	r25, r1
     8a8:	08 95       	ret

000008aa <strtol>:
     8aa:	2f 92       	push	r2
     8ac:	3f 92       	push	r3
     8ae:	4f 92       	push	r4
     8b0:	5f 92       	push	r5
     8b2:	6f 92       	push	r6
     8b4:	7f 92       	push	r7
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	5c 01       	movw	r10, r24
     8d0:	6b 01       	movw	r12, r22
     8d2:	7a 01       	movw	r14, r20
     8d4:	61 15       	cp	r22, r1
     8d6:	71 05       	cpc	r23, r1
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <strtol+0x36>
     8da:	fb 01       	movw	r30, r22
     8dc:	80 83       	st	Z, r24
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	e1 14       	cp	r14, r1
     8e2:	f1 04       	cpc	r15, r1
     8e4:	29 f0       	breq	.+10     	; 0x8f0 <strtol+0x46>
     8e6:	c7 01       	movw	r24, r14
     8e8:	02 97       	sbiw	r24, 0x02	; 2
     8ea:	83 97       	sbiw	r24, 0x23	; 35
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <strtol+0x46>
     8ee:	f1 c0       	rjmp	.+482    	; 0xad2 <strtol+0x228>
     8f0:	e5 01       	movw	r28, r10
     8f2:	21 96       	adiw	r28, 0x01	; 1
     8f4:	f5 01       	movw	r30, r10
     8f6:	10 81       	ld	r17, Z
     8f8:	81 2f       	mov	r24, r17
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 80 05 	call	0xb00	; 0xb00 <isspace>
     900:	89 2b       	or	r24, r25
     902:	11 f0       	breq	.+4      	; 0x908 <strtol+0x5e>
     904:	5e 01       	movw	r10, r28
     906:	f4 cf       	rjmp	.-24     	; 0x8f0 <strtol+0x46>
     908:	1d 32       	cpi	r17, 0x2D	; 45
     90a:	29 f4       	brne	.+10     	; 0x916 <strtol+0x6c>
     90c:	21 96       	adiw	r28, 0x01	; 1
     90e:	f5 01       	movw	r30, r10
     910:	11 81       	ldd	r17, Z+1	; 0x01
     912:	01 e0       	ldi	r16, 0x01	; 1
     914:	07 c0       	rjmp	.+14     	; 0x924 <strtol+0x7a>
     916:	1b 32       	cpi	r17, 0x2B	; 43
     918:	21 f4       	brne	.+8      	; 0x922 <strtol+0x78>
     91a:	e5 01       	movw	r28, r10
     91c:	22 96       	adiw	r28, 0x02	; 2
     91e:	f5 01       	movw	r30, r10
     920:	11 81       	ldd	r17, Z+1	; 0x01
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	e1 14       	cp	r14, r1
     926:	f1 04       	cpc	r15, r1
     928:	59 f1       	breq	.+86     	; 0x980 <strtol+0xd6>
     92a:	f0 e1       	ldi	r31, 0x10	; 16
     92c:	ef 16       	cp	r14, r31
     92e:	f1 04       	cpc	r15, r1
     930:	61 f4       	brne	.+24     	; 0x94a <strtol+0xa0>
     932:	10 33       	cpi	r17, 0x30	; 48
     934:	e1 f4       	brne	.+56     	; 0x96e <strtol+0xc4>
     936:	88 81       	ld	r24, Y
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	88 35       	cpi	r24, 0x58	; 88
     93c:	69 f5       	brne	.+90     	; 0x998 <strtol+0xee>
     93e:	19 81       	ldd	r17, Y+1	; 0x01
     940:	22 96       	adiw	r28, 0x02	; 2
     942:	02 60       	ori	r16, 0x02	; 2
     944:	70 e1       	ldi	r23, 0x10	; 16
     946:	e7 2e       	mov	r14, r23
     948:	f1 2c       	mov	r15, r1
     94a:	88 e0       	ldi	r24, 0x08	; 8
     94c:	e8 16       	cp	r14, r24
     94e:	f1 04       	cpc	r15, r1
     950:	39 f1       	breq	.+78     	; 0x9a0 <strtol+0xf6>
     952:	2c f4       	brge	.+10     	; 0x95e <strtol+0xb4>
     954:	f2 e0       	ldi	r31, 0x02	; 2
     956:	ef 16       	cp	r14, r31
     958:	f1 04       	cpc	r15, r1
     95a:	c9 f1       	breq	.+114    	; 0x9ce <strtol+0x124>
     95c:	2a c0       	rjmp	.+84     	; 0x9b2 <strtol+0x108>
     95e:	8a e0       	ldi	r24, 0x0A	; 10
     960:	e8 16       	cp	r14, r24
     962:	f1 04       	cpc	r15, r1
     964:	79 f0       	breq	.+30     	; 0x984 <strtol+0xda>
     966:	e0 e1       	ldi	r30, 0x10	; 16
     968:	ee 16       	cp	r14, r30
     96a:	f1 04       	cpc	r15, r1
     96c:	11 f5       	brne	.+68     	; 0x9b2 <strtol+0x108>
     96e:	50 e1       	ldi	r21, 0x10	; 16
     970:	e5 2e       	mov	r14, r21
     972:	f1 2c       	mov	r15, r1
     974:	81 2c       	mov	r8, r1
     976:	91 2c       	mov	r9, r1
     978:	a1 2c       	mov	r10, r1
     97a:	68 e0       	ldi	r22, 0x08	; 8
     97c:	b6 2e       	mov	r11, r22
     97e:	2c c0       	rjmp	.+88     	; 0x9d8 <strtol+0x12e>
     980:	10 33       	cpi	r17, 0x30	; 48
     982:	c9 f2       	breq	.-78     	; 0x936 <strtol+0x8c>
     984:	3a e0       	ldi	r19, 0x0A	; 10
     986:	e3 2e       	mov	r14, r19
     988:	f1 2c       	mov	r15, r1
     98a:	4c ec       	ldi	r20, 0xCC	; 204
     98c:	84 2e       	mov	r8, r20
     98e:	98 2c       	mov	r9, r8
     990:	a8 2c       	mov	r10, r8
     992:	4c e0       	ldi	r20, 0x0C	; 12
     994:	b4 2e       	mov	r11, r20
     996:	20 c0       	rjmp	.+64     	; 0x9d8 <strtol+0x12e>
     998:	10 e3       	ldi	r17, 0x30	; 48
     99a:	e1 14       	cp	r14, r1
     99c:	f1 04       	cpc	r15, r1
     99e:	a9 f6       	brne	.-86     	; 0x94a <strtol+0xa0>
     9a0:	98 e0       	ldi	r25, 0x08	; 8
     9a2:	e9 2e       	mov	r14, r25
     9a4:	f1 2c       	mov	r15, r1
     9a6:	81 2c       	mov	r8, r1
     9a8:	91 2c       	mov	r9, r1
     9aa:	a1 2c       	mov	r10, r1
     9ac:	20 e1       	ldi	r18, 0x10	; 16
     9ae:	b2 2e       	mov	r11, r18
     9b0:	13 c0       	rjmp	.+38     	; 0x9d8 <strtol+0x12e>
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e8       	ldi	r25, 0x80	; 128
     9ba:	97 01       	movw	r18, r14
     9bc:	0f 2c       	mov	r0, r15
     9be:	00 0c       	add	r0, r0
     9c0:	44 0b       	sbc	r20, r20
     9c2:	55 0b       	sbc	r21, r21
     9c4:	0e 94 24 04 	call	0x848	; 0x848 <__udivmodsi4>
     9c8:	49 01       	movw	r8, r18
     9ca:	5a 01       	movw	r10, r20
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <strtol+0x12e>
     9ce:	81 2c       	mov	r8, r1
     9d0:	91 2c       	mov	r9, r1
     9d2:	a1 2c       	mov	r10, r1
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	b8 2e       	mov	r11, r24
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	27 01       	movw	r4, r14
     9e2:	0f 2c       	mov	r0, r15
     9e4:	00 0c       	add	r0, r0
     9e6:	66 08       	sbc	r6, r6
     9e8:	77 08       	sbc	r7, r7
     9ea:	1e 01       	movw	r2, r28
     9ec:	e0 ed       	ldi	r30, 0xD0	; 208
     9ee:	e1 0f       	add	r30, r17
     9f0:	ea 30       	cpi	r30, 0x0A	; 10
     9f2:	60 f0       	brcs	.+24     	; 0xa0c <strtol+0x162>
     9f4:	8f eb       	ldi	r24, 0xBF	; 191
     9f6:	81 0f       	add	r24, r17
     9f8:	8a 31       	cpi	r24, 0x1A	; 26
     9fa:	10 f4       	brcc	.+4      	; 0xa00 <strtol+0x156>
     9fc:	e9 ec       	ldi	r30, 0xC9	; 201
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <strtol+0x160>
     a00:	8f e9       	ldi	r24, 0x9F	; 159
     a02:	81 0f       	add	r24, r17
     a04:	8a 31       	cpi	r24, 0x1A	; 26
     a06:	28 f5       	brcc	.+74     	; 0xa52 <strtol+0x1a8>
     a08:	e9 ea       	ldi	r30, 0xA9	; 169
     a0a:	e1 0f       	add	r30, r17
     a0c:	8e 2f       	mov	r24, r30
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	8e 15       	cp	r24, r14
     a12:	9f 05       	cpc	r25, r15
     a14:	f4 f4       	brge	.+60     	; 0xa52 <strtol+0x1a8>
     a16:	67 fd       	sbrc	r22, 7
     a18:	18 c0       	rjmp	.+48     	; 0xa4a <strtol+0x1a0>
     a1a:	82 16       	cp	r8, r18
     a1c:	93 06       	cpc	r9, r19
     a1e:	a4 06       	cpc	r10, r20
     a20:	b5 06       	cpc	r11, r21
     a22:	90 f0       	brcs	.+36     	; 0xa48 <strtol+0x19e>
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulsi3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	2e 0f       	add	r18, r30
     a32:	31 1d       	adc	r19, r1
     a34:	41 1d       	adc	r20, r1
     a36:	51 1d       	adc	r21, r1
     a38:	21 30       	cpi	r18, 0x01	; 1
     a3a:	31 05       	cpc	r19, r1
     a3c:	41 05       	cpc	r20, r1
     a3e:	f0 e8       	ldi	r31, 0x80	; 128
     a40:	5f 07       	cpc	r21, r31
     a42:	10 f4       	brcc	.+4      	; 0xa48 <strtol+0x19e>
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <strtol+0x1a0>
     a48:	6f ef       	ldi	r22, 0xFF	; 255
     a4a:	21 96       	adiw	r28, 0x01	; 1
     a4c:	f1 01       	movw	r30, r2
     a4e:	10 81       	ld	r17, Z
     a50:	cc cf       	rjmp	.-104    	; 0x9ea <strtol+0x140>
     a52:	80 2f       	mov	r24, r16
     a54:	81 70       	andi	r24, 0x01	; 1
     a56:	c1 14       	cp	r12, r1
     a58:	d1 04       	cpc	r13, r1
     a5a:	71 f0       	breq	.+28     	; 0xa78 <strtol+0x1ce>
     a5c:	66 23       	and	r22, r22
     a5e:	29 f0       	breq	.+10     	; 0xa6a <strtol+0x1c0>
     a60:	21 97       	sbiw	r28, 0x01	; 1
     a62:	f6 01       	movw	r30, r12
     a64:	c0 83       	st	Z, r28
     a66:	d1 83       	std	Z+1, r29	; 0x01
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <strtol+0x1ce>
     a6a:	01 ff       	sbrs	r16, 1
     a6c:	19 c0       	rjmp	.+50     	; 0xaa0 <strtol+0x1f6>
     a6e:	22 97       	sbiw	r28, 0x02	; 2
     a70:	f6 01       	movw	r30, r12
     a72:	c0 83       	st	Z, r28
     a74:	d1 83       	std	Z+1, r29	; 0x01
     a76:	14 c0       	rjmp	.+40     	; 0xaa0 <strtol+0x1f6>
     a78:	67 ff       	sbrs	r22, 7
     a7a:	12 c0       	rjmp	.+36     	; 0xaa0 <strtol+0x1f6>
     a7c:	81 11       	cpse	r24, r1
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <strtol+0x1e0>
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	4f ef       	ldi	r20, 0xFF	; 255
     a86:	5f e7       	ldi	r21, 0x7F	; 127
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <strtol+0x1e8>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e8       	ldi	r21, 0x80	; 128
     a92:	82 e2       	ldi	r24, 0x22	; 34
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	80 93 d2 20 	sts	0x20D2, r24
     a9a:	90 93 d3 20 	sts	0x20D3, r25
     a9e:	16 c0       	rjmp	.+44     	; 0xacc <strtol+0x222>
     aa0:	88 23       	and	r24, r24
     aa2:	41 f0       	breq	.+16     	; 0xab4 <strtol+0x20a>
     aa4:	50 95       	com	r21
     aa6:	40 95       	com	r20
     aa8:	30 95       	com	r19
     aaa:	21 95       	neg	r18
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	4f 4f       	sbci	r20, 0xFF	; 255
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	0c c0       	rjmp	.+24     	; 0xacc <strtol+0x222>
     ab4:	57 ff       	sbrs	r21, 7
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <strtol+0x222>
     ab8:	82 e2       	ldi	r24, 0x22	; 34
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	80 93 d2 20 	sts	0x20D2, r24
     ac0:	90 93 d3 20 	sts	0x20D3, r25
     ac4:	2f ef       	ldi	r18, 0xFF	; 255
     ac6:	3f ef       	ldi	r19, 0xFF	; 255
     ac8:	4f ef       	ldi	r20, 0xFF	; 255
     aca:	5f e7       	ldi	r21, 0x7F	; 127
     acc:	b9 01       	movw	r22, r18
     ace:	ca 01       	movw	r24, r20
     ad0:	04 c0       	rjmp	.+8      	; 0xada <strtol+0x230>
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	7f 90       	pop	r7
     af4:	6f 90       	pop	r6
     af6:	5f 90       	pop	r5
     af8:	4f 90       	pop	r4
     afa:	3f 90       	pop	r3
     afc:	2f 90       	pop	r2
     afe:	08 95       	ret

00000b00 <isspace>:
     b00:	91 11       	cpse	r25, r1
     b02:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__ctype_isfalse>
     b06:	80 32       	cpi	r24, 0x20	; 32
     b08:	19 f0       	breq	.+6      	; 0xb10 <isspace+0x10>
     b0a:	89 50       	subi	r24, 0x09	; 9
     b0c:	85 50       	subi	r24, 0x05	; 5
     b0e:	c8 f7       	brcc	.-14     	; 0xb02 <isspace+0x2>
     b10:	08 95       	ret

00000b12 <gets>:
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	e0 91 cc 20 	lds	r30, 0x20CC
     b1e:	f0 91 cd 20 	lds	r31, 0x20CD
     b22:	23 81       	ldd	r18, Z+3	; 0x03
     b24:	20 fd       	sbrc	r18, 0
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <gets+0x1c>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	17 c0       	rjmp	.+46     	; 0xb5c <gets+0x4a>
     b2e:	c9 2f       	mov	r28, r25
     b30:	d8 2f       	mov	r29, r24
     b32:	08 2f       	mov	r16, r24
     b34:	19 2f       	mov	r17, r25
     b36:	80 91 cc 20 	lds	r24, 0x20CC
     b3a:	90 91 cd 20 	lds	r25, 0x20CD
     b3e:	0e 94 05 08 	call	0x100a	; 0x100a <fgetc>
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	92 07       	cpc	r25, r18
     b48:	79 f3       	breq	.-34     	; 0xb28 <gets+0x16>
     b4a:	f8 01       	movw	r30, r16
     b4c:	81 93       	st	Z+, r24
     b4e:	8f 01       	movw	r16, r30
     b50:	0a 97       	sbiw	r24, 0x0a	; 10
     b52:	89 f7       	brne	.-30     	; 0xb36 <gets+0x24>
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	10 82       	st	Z, r1
     b58:	8d 2f       	mov	r24, r29
     b5a:	9c 2f       	mov	r25, r28
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <printf>:
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	ae 01       	movw	r20, r28
     b70:	4a 5f       	subi	r20, 0xFA	; 250
     b72:	5f 4f       	sbci	r21, 0xFF	; 255
     b74:	fa 01       	movw	r30, r20
     b76:	61 91       	ld	r22, Z+
     b78:	71 91       	ld	r23, Z+
     b7a:	af 01       	movw	r20, r30
     b7c:	80 91 ce 20 	lds	r24, 0x20CE
     b80:	90 91 cf 20 	lds	r25, 0x20CF
     b84:	0e 94 f7 05 	call	0xbee	; 0xbee <vfprintf>
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <puts>:
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	e0 91 ce 20 	lds	r30, 0x20CE
     b9a:	f0 91 cf 20 	lds	r31, 0x20CF
     b9e:	23 81       	ldd	r18, Z+3	; 0x03
     ba0:	21 ff       	sbrs	r18, 1
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <puts+0x4c>
     ba4:	8c 01       	movw	r16, r24
     ba6:	d0 e0       	ldi	r29, 0x00	; 0
     ba8:	c0 e0       	ldi	r28, 0x00	; 0
     baa:	f8 01       	movw	r30, r16
     bac:	81 91       	ld	r24, Z+
     bae:	8f 01       	movw	r16, r30
     bb0:	60 91 ce 20 	lds	r22, 0x20CE
     bb4:	70 91 cf 20 	lds	r23, 0x20CF
     bb8:	db 01       	movw	r26, r22
     bba:	18 96       	adiw	r26, 0x08	; 8
     bbc:	ed 91       	ld	r30, X+
     bbe:	fc 91       	ld	r31, X
     bc0:	19 97       	sbiw	r26, 0x09	; 9
     bc2:	88 23       	and	r24, r24
     bc4:	31 f0       	breq	.+12     	; 0xbd2 <puts+0x44>
     bc6:	19 95       	eicall
     bc8:	89 2b       	or	r24, r25
     bca:	79 f3       	breq	.-34     	; 0xbaa <puts+0x1c>
     bcc:	df ef       	ldi	r29, 0xFF	; 255
     bce:	cf ef       	ldi	r28, 0xFF	; 255
     bd0:	ec cf       	rjmp	.-40     	; 0xbaa <puts+0x1c>
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	19 95       	eicall
     bd6:	89 2b       	or	r24, r25
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <puts+0x52>
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <puts+0x56>
     be0:	8d 2f       	mov	r24, r29
     be2:	9c 2f       	mov	r25, r28
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <vfprintf>:
     bee:	2f 92       	push	r2
     bf0:	3f 92       	push	r3
     bf2:	4f 92       	push	r4
     bf4:	5f 92       	push	r5
     bf6:	6f 92       	push	r6
     bf8:	7f 92       	push	r7
     bfa:	8f 92       	push	r8
     bfc:	9f 92       	push	r9
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	2c 97       	sbiw	r28, 0x0c	; 12
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	7c 01       	movw	r14, r24
     c1e:	6b 01       	movw	r12, r22
     c20:	8a 01       	movw	r16, r20
     c22:	fc 01       	movw	r30, r24
     c24:	16 82       	std	Z+6, r1	; 0x06
     c26:	17 82       	std	Z+7, r1	; 0x07
     c28:	83 81       	ldd	r24, Z+3	; 0x03
     c2a:	81 ff       	sbrs	r24, 1
     c2c:	bd c1       	rjmp	.+890    	; 0xfa8 <vfprintf+0x3ba>
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	4c 01       	movw	r8, r24
     c34:	f7 01       	movw	r30, r14
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	f6 01       	movw	r30, r12
     c3a:	93 fd       	sbrc	r25, 3
     c3c:	85 91       	lpm	r24, Z+
     c3e:	93 ff       	sbrs	r25, 3
     c40:	81 91       	ld	r24, Z+
     c42:	6f 01       	movw	r12, r30
     c44:	88 23       	and	r24, r24
     c46:	09 f4       	brne	.+2      	; 0xc4a <vfprintf+0x5c>
     c48:	ab c1       	rjmp	.+854    	; 0xfa0 <vfprintf+0x3b2>
     c4a:	85 32       	cpi	r24, 0x25	; 37
     c4c:	39 f4       	brne	.+14     	; 0xc5c <vfprintf+0x6e>
     c4e:	93 fd       	sbrc	r25, 3
     c50:	85 91       	lpm	r24, Z+
     c52:	93 ff       	sbrs	r25, 3
     c54:	81 91       	ld	r24, Z+
     c56:	6f 01       	movw	r12, r30
     c58:	85 32       	cpi	r24, 0x25	; 37
     c5a:	29 f4       	brne	.+10     	; 0xc66 <vfprintf+0x78>
     c5c:	b7 01       	movw	r22, r14
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     c64:	e7 cf       	rjmp	.-50     	; 0xc34 <vfprintf+0x46>
     c66:	51 2c       	mov	r5, r1
     c68:	31 2c       	mov	r3, r1
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	20 32       	cpi	r18, 0x20	; 32
     c6e:	a0 f4       	brcc	.+40     	; 0xc98 <vfprintf+0xaa>
     c70:	8b 32       	cpi	r24, 0x2B	; 43
     c72:	69 f0       	breq	.+26     	; 0xc8e <vfprintf+0xa0>
     c74:	30 f4       	brcc	.+12     	; 0xc82 <vfprintf+0x94>
     c76:	80 32       	cpi	r24, 0x20	; 32
     c78:	59 f0       	breq	.+22     	; 0xc90 <vfprintf+0xa2>
     c7a:	83 32       	cpi	r24, 0x23	; 35
     c7c:	69 f4       	brne	.+26     	; 0xc98 <vfprintf+0xaa>
     c7e:	20 61       	ori	r18, 0x10	; 16
     c80:	2c c0       	rjmp	.+88     	; 0xcda <vfprintf+0xec>
     c82:	8d 32       	cpi	r24, 0x2D	; 45
     c84:	39 f0       	breq	.+14     	; 0xc94 <vfprintf+0xa6>
     c86:	80 33       	cpi	r24, 0x30	; 48
     c88:	39 f4       	brne	.+14     	; 0xc98 <vfprintf+0xaa>
     c8a:	21 60       	ori	r18, 0x01	; 1
     c8c:	26 c0       	rjmp	.+76     	; 0xcda <vfprintf+0xec>
     c8e:	22 60       	ori	r18, 0x02	; 2
     c90:	24 60       	ori	r18, 0x04	; 4
     c92:	23 c0       	rjmp	.+70     	; 0xcda <vfprintf+0xec>
     c94:	28 60       	ori	r18, 0x08	; 8
     c96:	21 c0       	rjmp	.+66     	; 0xcda <vfprintf+0xec>
     c98:	27 fd       	sbrc	r18, 7
     c9a:	27 c0       	rjmp	.+78     	; 0xcea <vfprintf+0xfc>
     c9c:	30 ed       	ldi	r19, 0xD0	; 208
     c9e:	38 0f       	add	r19, r24
     ca0:	3a 30       	cpi	r19, 0x0A	; 10
     ca2:	78 f4       	brcc	.+30     	; 0xcc2 <vfprintf+0xd4>
     ca4:	26 ff       	sbrs	r18, 6
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <vfprintf+0xc6>
     ca8:	fa e0       	ldi	r31, 0x0A	; 10
     caa:	5f 9e       	mul	r5, r31
     cac:	30 0d       	add	r19, r0
     cae:	11 24       	eor	r1, r1
     cb0:	53 2e       	mov	r5, r19
     cb2:	13 c0       	rjmp	.+38     	; 0xcda <vfprintf+0xec>
     cb4:	8a e0       	ldi	r24, 0x0A	; 10
     cb6:	38 9e       	mul	r3, r24
     cb8:	30 0d       	add	r19, r0
     cba:	11 24       	eor	r1, r1
     cbc:	33 2e       	mov	r3, r19
     cbe:	20 62       	ori	r18, 0x20	; 32
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <vfprintf+0xec>
     cc2:	8e 32       	cpi	r24, 0x2E	; 46
     cc4:	21 f4       	brne	.+8      	; 0xcce <vfprintf+0xe0>
     cc6:	26 fd       	sbrc	r18, 6
     cc8:	6b c1       	rjmp	.+726    	; 0xfa0 <vfprintf+0x3b2>
     cca:	20 64       	ori	r18, 0x40	; 64
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0xec>
     cce:	8c 36       	cpi	r24, 0x6C	; 108
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <vfprintf+0xe8>
     cd2:	20 68       	ori	r18, 0x80	; 128
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0xec>
     cd6:	88 36       	cpi	r24, 0x68	; 104
     cd8:	41 f4       	brne	.+16     	; 0xcea <vfprintf+0xfc>
     cda:	f6 01       	movw	r30, r12
     cdc:	93 fd       	sbrc	r25, 3
     cde:	85 91       	lpm	r24, Z+
     ce0:	93 ff       	sbrs	r25, 3
     ce2:	81 91       	ld	r24, Z+
     ce4:	6f 01       	movw	r12, r30
     ce6:	81 11       	cpse	r24, r1
     ce8:	c1 cf       	rjmp	.-126    	; 0xc6c <vfprintf+0x7e>
     cea:	98 2f       	mov	r25, r24
     cec:	9f 7d       	andi	r25, 0xDF	; 223
     cee:	95 54       	subi	r25, 0x45	; 69
     cf0:	93 30       	cpi	r25, 0x03	; 3
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <vfprintf+0x110>
     cf4:	0c 5f       	subi	r16, 0xFC	; 252
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	ff e3       	ldi	r31, 0x3F	; 63
     cfa:	f9 83       	std	Y+1, r31	; 0x01
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <vfprintf+0x12a>
     cfe:	83 36       	cpi	r24, 0x63	; 99
     d00:	31 f0       	breq	.+12     	; 0xd0e <vfprintf+0x120>
     d02:	83 37       	cpi	r24, 0x73	; 115
     d04:	71 f0       	breq	.+28     	; 0xd22 <vfprintf+0x134>
     d06:	83 35       	cpi	r24, 0x53	; 83
     d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0x11e>
     d0a:	5b c0       	rjmp	.+182    	; 0xdc2 <vfprintf+0x1d4>
     d0c:	22 c0       	rjmp	.+68     	; 0xd52 <vfprintf+0x164>
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	0e 5f       	subi	r16, 0xFE	; 254
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	44 24       	eor	r4, r4
     d1a:	43 94       	inc	r4
     d1c:	51 2c       	mov	r5, r1
     d1e:	54 01       	movw	r10, r8
     d20:	15 c0       	rjmp	.+42     	; 0xd4c <vfprintf+0x15e>
     d22:	38 01       	movw	r6, r16
     d24:	f2 e0       	ldi	r31, 0x02	; 2
     d26:	6f 0e       	add	r6, r31
     d28:	71 1c       	adc	r7, r1
     d2a:	f8 01       	movw	r30, r16
     d2c:	a0 80       	ld	r10, Z
     d2e:	b1 80       	ldd	r11, Z+1	; 0x01
     d30:	26 ff       	sbrs	r18, 6
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x14c>
     d34:	65 2d       	mov	r22, r5
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x150>
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	7f ef       	ldi	r23, 0xFF	; 255
     d3e:	c5 01       	movw	r24, r10
     d40:	2c 87       	std	Y+12, r18	; 0x0c
     d42:	0e 94 fa 07 	call	0xff4	; 0xff4 <strnlen>
     d46:	2c 01       	movw	r4, r24
     d48:	83 01       	movw	r16, r6
     d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4c:	2f 77       	andi	r18, 0x7F	; 127
     d4e:	22 2e       	mov	r2, r18
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <vfprintf+0x192>
     d52:	38 01       	movw	r6, r16
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	6f 0e       	add	r6, r31
     d58:	71 1c       	adc	r7, r1
     d5a:	f8 01       	movw	r30, r16
     d5c:	a0 80       	ld	r10, Z
     d5e:	b1 80       	ldd	r11, Z+1	; 0x01
     d60:	26 ff       	sbrs	r18, 6
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x17c>
     d64:	65 2d       	mov	r22, r5
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x180>
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	7f ef       	ldi	r23, 0xFF	; 255
     d6e:	c5 01       	movw	r24, r10
     d70:	2c 87       	std	Y+12, r18	; 0x0c
     d72:	0e 94 ef 07 	call	0xfde	; 0xfde <strnlen_P>
     d76:	2c 01       	movw	r4, r24
     d78:	2c 85       	ldd	r18, Y+12	; 0x0c
     d7a:	20 68       	ori	r18, 0x80	; 128
     d7c:	22 2e       	mov	r2, r18
     d7e:	83 01       	movw	r16, r6
     d80:	23 fc       	sbrc	r2, 3
     d82:	1b c0       	rjmp	.+54     	; 0xdba <vfprintf+0x1cc>
     d84:	83 2d       	mov	r24, r3
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	48 16       	cp	r4, r24
     d8a:	59 06       	cpc	r5, r25
     d8c:	b0 f4       	brcc	.+44     	; 0xdba <vfprintf+0x1cc>
     d8e:	b7 01       	movw	r22, r14
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     d98:	3a 94       	dec	r3
     d9a:	f4 cf       	rjmp	.-24     	; 0xd84 <vfprintf+0x196>
     d9c:	f5 01       	movw	r30, r10
     d9e:	27 fc       	sbrc	r2, 7
     da0:	85 91       	lpm	r24, Z+
     da2:	27 fe       	sbrs	r2, 7
     da4:	81 91       	ld	r24, Z+
     da6:	5f 01       	movw	r10, r30
     da8:	b7 01       	movw	r22, r14
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     db0:	31 10       	cpse	r3, r1
     db2:	3a 94       	dec	r3
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	4f 1a       	sub	r4, r31
     db8:	51 08       	sbc	r5, r1
     dba:	41 14       	cp	r4, r1
     dbc:	51 04       	cpc	r5, r1
     dbe:	71 f7       	brne	.-36     	; 0xd9c <vfprintf+0x1ae>
     dc0:	e5 c0       	rjmp	.+458    	; 0xf8c <vfprintf+0x39e>
     dc2:	84 36       	cpi	r24, 0x64	; 100
     dc4:	11 f0       	breq	.+4      	; 0xdca <vfprintf+0x1dc>
     dc6:	89 36       	cpi	r24, 0x69	; 105
     dc8:	39 f5       	brne	.+78     	; 0xe18 <vfprintf+0x22a>
     dca:	f8 01       	movw	r30, r16
     dcc:	27 ff       	sbrs	r18, 7
     dce:	07 c0       	rjmp	.+14     	; 0xdde <vfprintf+0x1f0>
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	0c 5f       	subi	r16, 0xFC	; 252
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <vfprintf+0x200>
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	07 2e       	mov	r0, r23
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	2f 76       	andi	r18, 0x6F	; 111
     df0:	72 2e       	mov	r7, r18
     df2:	97 ff       	sbrs	r25, 7
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <vfprintf+0x21a>
     df6:	90 95       	com	r25
     df8:	80 95       	com	r24
     dfa:	70 95       	com	r23
     dfc:	61 95       	neg	r22
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	20 68       	ori	r18, 0x80	; 128
     e06:	72 2e       	mov	r7, r18
     e08:	2a e0       	ldi	r18, 0x0A	; 10
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	a4 01       	movw	r20, r8
     e0e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__ultoa_invert>
     e12:	a8 2e       	mov	r10, r24
     e14:	a8 18       	sub	r10, r8
     e16:	44 c0       	rjmp	.+136    	; 0xea0 <vfprintf+0x2b2>
     e18:	85 37       	cpi	r24, 0x75	; 117
     e1a:	29 f4       	brne	.+10     	; 0xe26 <vfprintf+0x238>
     e1c:	2f 7e       	andi	r18, 0xEF	; 239
     e1e:	b2 2e       	mov	r11, r18
     e20:	2a e0       	ldi	r18, 0x0A	; 10
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <vfprintf+0x282>
     e26:	f2 2f       	mov	r31, r18
     e28:	f9 7f       	andi	r31, 0xF9	; 249
     e2a:	bf 2e       	mov	r11, r31
     e2c:	8f 36       	cpi	r24, 0x6F	; 111
     e2e:	c1 f0       	breq	.+48     	; 0xe60 <vfprintf+0x272>
     e30:	18 f4       	brcc	.+6      	; 0xe38 <vfprintf+0x24a>
     e32:	88 35       	cpi	r24, 0x58	; 88
     e34:	79 f0       	breq	.+30     	; 0xe54 <vfprintf+0x266>
     e36:	b4 c0       	rjmp	.+360    	; 0xfa0 <vfprintf+0x3b2>
     e38:	80 37       	cpi	r24, 0x70	; 112
     e3a:	19 f0       	breq	.+6      	; 0xe42 <vfprintf+0x254>
     e3c:	88 37       	cpi	r24, 0x78	; 120
     e3e:	21 f0       	breq	.+8      	; 0xe48 <vfprintf+0x25a>
     e40:	af c0       	rjmp	.+350    	; 0xfa0 <vfprintf+0x3b2>
     e42:	2f 2f       	mov	r18, r31
     e44:	20 61       	ori	r18, 0x10	; 16
     e46:	b2 2e       	mov	r11, r18
     e48:	b4 fe       	sbrs	r11, 4
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <vfprintf+0x278>
     e4c:	8b 2d       	mov	r24, r11
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	b8 2e       	mov	r11, r24
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <vfprintf+0x278>
     e54:	24 ff       	sbrs	r18, 4
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <vfprintf+0x27e>
     e58:	9f 2f       	mov	r25, r31
     e5a:	96 60       	ori	r25, 0x06	; 6
     e5c:	b9 2e       	mov	r11, r25
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <vfprintf+0x27e>
     e60:	28 e0       	ldi	r18, 0x08	; 8
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <vfprintf+0x282>
     e66:	20 e1       	ldi	r18, 0x10	; 16
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x282>
     e6c:	20 e1       	ldi	r18, 0x10	; 16
     e6e:	32 e0       	ldi	r19, 0x02	; 2
     e70:	f8 01       	movw	r30, r16
     e72:	b7 fe       	sbrs	r11, 7
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <vfprintf+0x296>
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0c 5f       	subi	r16, 0xFC	; 252
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <vfprintf+0x2a2>
     e84:	60 81       	ld	r22, Z
     e86:	71 81       	ldd	r23, Z+1	; 0x01
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 5f       	subi	r16, 0xFE	; 254
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	a4 01       	movw	r20, r8
     e92:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__ultoa_invert>
     e96:	a8 2e       	mov	r10, r24
     e98:	a8 18       	sub	r10, r8
     e9a:	fb 2d       	mov	r31, r11
     e9c:	ff 77       	andi	r31, 0x7F	; 127
     e9e:	7f 2e       	mov	r7, r31
     ea0:	76 fe       	sbrs	r7, 6
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <vfprintf+0x2cc>
     ea4:	37 2d       	mov	r19, r7
     ea6:	3e 7f       	andi	r19, 0xFE	; 254
     ea8:	a5 14       	cp	r10, r5
     eaa:	50 f4       	brcc	.+20     	; 0xec0 <vfprintf+0x2d2>
     eac:	74 fe       	sbrs	r7, 4
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <vfprintf+0x2d6>
     eb0:	72 fc       	sbrc	r7, 2
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <vfprintf+0x2d6>
     eb4:	37 2d       	mov	r19, r7
     eb6:	3e 7e       	andi	r19, 0xEE	; 238
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <vfprintf+0x2d6>
     eba:	ba 2c       	mov	r11, r10
     ebc:	37 2d       	mov	r19, r7
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <vfprintf+0x2d8>
     ec0:	ba 2c       	mov	r11, r10
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x2d8>
     ec4:	b5 2c       	mov	r11, r5
     ec6:	34 ff       	sbrs	r19, 4
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vfprintf+0x2f6>
     eca:	fe 01       	movw	r30, r28
     ecc:	ea 0d       	add	r30, r10
     ece:	f1 1d       	adc	r31, r1
     ed0:	80 81       	ld	r24, Z
     ed2:	80 33       	cpi	r24, 0x30	; 48
     ed4:	11 f4       	brne	.+4      	; 0xeda <vfprintf+0x2ec>
     ed6:	39 7e       	andi	r19, 0xE9	; 233
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x2fe>
     eda:	32 ff       	sbrs	r19, 2
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0x2fc>
     ede:	b3 94       	inc	r11
     ee0:	b3 94       	inc	r11
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <vfprintf+0x2fe>
     ee4:	83 2f       	mov	r24, r19
     ee6:	86 78       	andi	r24, 0x86	; 134
     ee8:	09 f0       	breq	.+2      	; 0xeec <vfprintf+0x2fe>
     eea:	b3 94       	inc	r11
     eec:	33 fd       	sbrc	r19, 3
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <vfprintf+0x328>
     ef0:	30 ff       	sbrs	r19, 0
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <vfprintf+0x312>
     ef4:	5a 2c       	mov	r5, r10
     ef6:	b3 14       	cp	r11, r3
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <vfprintf+0x312>
     efa:	53 0c       	add	r5, r3
     efc:	5b 18       	sub	r5, r11
     efe:	b3 2c       	mov	r11, r3
     f00:	b3 14       	cp	r11, r3
     f02:	68 f4       	brcc	.+26     	; 0xf1e <vfprintf+0x330>
     f04:	b7 01       	movw	r22, r14
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	3c 87       	std	Y+12, r19	; 0x0c
     f0c:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f10:	b3 94       	inc	r11
     f12:	3c 85       	ldd	r19, Y+12	; 0x0c
     f14:	f5 cf       	rjmp	.-22     	; 0xf00 <vfprintf+0x312>
     f16:	b3 14       	cp	r11, r3
     f18:	10 f4       	brcc	.+4      	; 0xf1e <vfprintf+0x330>
     f1a:	3b 18       	sub	r3, r11
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <vfprintf+0x332>
     f1e:	31 2c       	mov	r3, r1
     f20:	34 ff       	sbrs	r19, 4
     f22:	12 c0       	rjmp	.+36     	; 0xf48 <vfprintf+0x35a>
     f24:	b7 01       	movw	r22, r14
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	3c 87       	std	Y+12, r19	; 0x0c
     f2c:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f30:	3c 85       	ldd	r19, Y+12	; 0x0c
     f32:	32 ff       	sbrs	r19, 2
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <vfprintf+0x376>
     f36:	31 fd       	sbrc	r19, 1
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <vfprintf+0x352>
     f3a:	88 e7       	ldi	r24, 0x78	; 120
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <vfprintf+0x356>
     f40:	88 e5       	ldi	r24, 0x58	; 88
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	b7 01       	movw	r22, r14
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <vfprintf+0x372>
     f48:	83 2f       	mov	r24, r19
     f4a:	86 78       	andi	r24, 0x86	; 134
     f4c:	59 f0       	breq	.+22     	; 0xf64 <vfprintf+0x376>
     f4e:	31 ff       	sbrs	r19, 1
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x368>
     f52:	8b e2       	ldi	r24, 0x2B	; 43
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <vfprintf+0x36a>
     f56:	80 e2       	ldi	r24, 0x20	; 32
     f58:	37 fd       	sbrc	r19, 7
     f5a:	8d e2       	ldi	r24, 0x2D	; 45
     f5c:	b7 01       	movw	r22, r14
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f64:	a5 14       	cp	r10, r5
     f66:	38 f4       	brcc	.+14     	; 0xf76 <vfprintf+0x388>
     f68:	b7 01       	movw	r22, r14
     f6a:	80 e3       	ldi	r24, 0x30	; 48
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f72:	5a 94       	dec	r5
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <vfprintf+0x376>
     f76:	aa 94       	dec	r10
     f78:	f4 01       	movw	r30, r8
     f7a:	ea 0d       	add	r30, r10
     f7c:	f1 1d       	adc	r31, r1
     f7e:	80 81       	ld	r24, Z
     f80:	b7 01       	movw	r22, r14
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f88:	a1 10       	cpse	r10, r1
     f8a:	f5 cf       	rjmp	.-22     	; 0xf76 <vfprintf+0x388>
     f8c:	33 20       	and	r3, r3
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vfprintf+0x3a4>
     f90:	51 ce       	rjmp	.-862    	; 0xc34 <vfprintf+0x46>
     f92:	b7 01       	movw	r22, r14
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     f9c:	3a 94       	dec	r3
     f9e:	f6 cf       	rjmp	.-20     	; 0xf8c <vfprintf+0x39e>
     fa0:	f7 01       	movw	r30, r14
     fa2:	86 81       	ldd	r24, Z+6	; 0x06
     fa4:	97 81       	ldd	r25, Z+7	; 0x07
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x3be>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	2c 96       	adiw	r28, 0x0c	; 12
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	8f 90       	pop	r8
     fca:	7f 90       	pop	r7
     fcc:	6f 90       	pop	r6
     fce:	5f 90       	pop	r5
     fd0:	4f 90       	pop	r4
     fd2:	3f 90       	pop	r3
     fd4:	2f 90       	pop	r2
     fd6:	08 95       	ret

00000fd8 <__ctype_isfalse>:
     fd8:	99 27       	eor	r25, r25
     fda:	88 27       	eor	r24, r24

00000fdc <__ctype_istrue>:
     fdc:	08 95       	ret

00000fde <strnlen_P>:
     fde:	fc 01       	movw	r30, r24
     fe0:	05 90       	lpm	r0, Z+
     fe2:	61 50       	subi	r22, 0x01	; 1
     fe4:	70 40       	sbci	r23, 0x00	; 0
     fe6:	01 10       	cpse	r0, r1
     fe8:	d8 f7       	brcc	.-10     	; 0xfe0 <strnlen_P+0x2>
     fea:	80 95       	com	r24
     fec:	90 95       	com	r25
     fee:	8e 0f       	add	r24, r30
     ff0:	9f 1f       	adc	r25, r31
     ff2:	08 95       	ret

00000ff4 <strnlen>:
     ff4:	fc 01       	movw	r30, r24
     ff6:	61 50       	subi	r22, 0x01	; 1
     ff8:	70 40       	sbci	r23, 0x00	; 0
     ffa:	01 90       	ld	r0, Z+
     ffc:	01 10       	cpse	r0, r1
     ffe:	d8 f7       	brcc	.-10     	; 0xff6 <strnlen+0x2>
    1000:	80 95       	com	r24
    1002:	90 95       	com	r25
    1004:	8e 0f       	add	r24, r30
    1006:	9f 1f       	adc	r25, r31
    1008:	08 95       	ret

0000100a <fgetc>:
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	20 ff       	sbrs	r18, 0
    1014:	33 c0       	rjmp	.+102    	; 0x107c <fgetc+0x72>
    1016:	26 ff       	sbrs	r18, 6
    1018:	0a c0       	rjmp	.+20     	; 0x102e <fgetc+0x24>
    101a:	2f 7b       	andi	r18, 0xBF	; 191
    101c:	2b 83       	std	Y+3, r18	; 0x03
    101e:	8e 81       	ldd	r24, Y+6	; 0x06
    1020:	9f 81       	ldd	r25, Y+7	; 0x07
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	8e 83       	std	Y+6, r24	; 0x06
    1026:	9f 83       	std	Y+7, r25	; 0x07
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	29 c0       	rjmp	.+82     	; 0x1080 <fgetc+0x76>
    102e:	22 ff       	sbrs	r18, 2
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <fgetc+0x46>
    1032:	e8 81       	ld	r30, Y
    1034:	f9 81       	ldd	r31, Y+1	; 0x01
    1036:	80 81       	ld	r24, Z
    1038:	08 2e       	mov	r0, r24
    103a:	00 0c       	add	r0, r0
    103c:	99 0b       	sbc	r25, r25
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	19 f4       	brne	.+6      	; 0x1048 <fgetc+0x3e>
    1042:	20 62       	ori	r18, 0x20	; 32
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	1a c0       	rjmp	.+52     	; 0x107c <fgetc+0x72>
    1048:	31 96       	adiw	r30, 0x01	; 1
    104a:	e8 83       	st	Y, r30
    104c:	f9 83       	std	Y+1, r31	; 0x01
    104e:	0e c0       	rjmp	.+28     	; 0x106c <fgetc+0x62>
    1050:	ea 85       	ldd	r30, Y+10	; 0x0a
    1052:	fb 85       	ldd	r31, Y+11	; 0x0b
    1054:	19 95       	eicall
    1056:	97 ff       	sbrs	r25, 7
    1058:	09 c0       	rjmp	.+18     	; 0x106c <fgetc+0x62>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	11 f0       	breq	.+4      	; 0x1064 <fgetc+0x5a>
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <fgetc+0x5c>
    1064:	80 e1       	ldi	r24, 0x10	; 16
    1066:	82 2b       	or	r24, r18
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	08 c0       	rjmp	.+16     	; 0x107c <fgetc+0x72>
    106c:	2e 81       	ldd	r18, Y+6	; 0x06
    106e:	3f 81       	ldd	r19, Y+7	; 0x07
    1070:	2f 5f       	subi	r18, 0xFF	; 255
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	2e 83       	std	Y+6, r18	; 0x06
    1076:	3f 83       	std	Y+7, r19	; 0x07
    1078:	99 27       	eor	r25, r25
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <fgetc+0x76>
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <fputc>:
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	fb 01       	movw	r30, r22
    1090:	23 81       	ldd	r18, Z+3	; 0x03
    1092:	21 fd       	sbrc	r18, 1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <fputc+0x16>
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	28 c0       	rjmp	.+80     	; 0x10ec <fputc+0x66>
    109c:	22 ff       	sbrs	r18, 2
    109e:	16 c0       	rjmp	.+44     	; 0x10cc <fputc+0x46>
    10a0:	46 81       	ldd	r20, Z+6	; 0x06
    10a2:	57 81       	ldd	r21, Z+7	; 0x07
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	35 81       	ldd	r19, Z+5	; 0x05
    10a8:	42 17       	cp	r20, r18
    10aa:	53 07       	cpc	r21, r19
    10ac:	44 f4       	brge	.+16     	; 0x10be <fputc+0x38>
    10ae:	a0 81       	ld	r26, Z
    10b0:	b1 81       	ldd	r27, Z+1	; 0x01
    10b2:	9d 01       	movw	r18, r26
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	20 83       	st	Z, r18
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	8c 93       	st	X, r24
    10be:	26 81       	ldd	r18, Z+6	; 0x06
    10c0:	37 81       	ldd	r19, Z+7	; 0x07
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	26 83       	std	Z+6, r18	; 0x06
    10c8:	37 83       	std	Z+7, r19	; 0x07
    10ca:	10 c0       	rjmp	.+32     	; 0x10ec <fputc+0x66>
    10cc:	eb 01       	movw	r28, r22
    10ce:	09 2f       	mov	r16, r25
    10d0:	18 2f       	mov	r17, r24
    10d2:	00 84       	ldd	r0, Z+8	; 0x08
    10d4:	f1 85       	ldd	r31, Z+9	; 0x09
    10d6:	e0 2d       	mov	r30, r0
    10d8:	19 95       	eicall
    10da:	89 2b       	or	r24, r25
    10dc:	e1 f6       	brne	.-72     	; 0x1096 <fputc+0x10>
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	9f 81       	ldd	r25, Y+7	; 0x07
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	8e 83       	std	Y+6, r24	; 0x06
    10e6:	9f 83       	std	Y+7, r25	; 0x07
    10e8:	81 2f       	mov	r24, r17
    10ea:	90 2f       	mov	r25, r16
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <__ultoa_invert>:
    10f6:	fa 01       	movw	r30, r20
    10f8:	aa 27       	eor	r26, r26
    10fa:	28 30       	cpi	r18, 0x08	; 8
    10fc:	51 f1       	breq	.+84     	; 0x1152 <__ultoa_invert+0x5c>
    10fe:	20 31       	cpi	r18, 0x10	; 16
    1100:	81 f1       	breq	.+96     	; 0x1162 <__ultoa_invert+0x6c>
    1102:	e8 94       	clt
    1104:	6f 93       	push	r22
    1106:	6e 7f       	andi	r22, 0xFE	; 254
    1108:	6e 5f       	subi	r22, 0xFE	; 254
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	af 4f       	sbci	r26, 0xFF	; 255
    1112:	b1 e0       	ldi	r27, 0x01	; 1
    1114:	3e d0       	rcall	.+124    	; 0x1192 <__ultoa_invert+0x9c>
    1116:	b4 e0       	ldi	r27, 0x04	; 4
    1118:	3c d0       	rcall	.+120    	; 0x1192 <__ultoa_invert+0x9c>
    111a:	67 0f       	add	r22, r23
    111c:	78 1f       	adc	r23, r24
    111e:	89 1f       	adc	r24, r25
    1120:	9a 1f       	adc	r25, r26
    1122:	a1 1d       	adc	r26, r1
    1124:	68 0f       	add	r22, r24
    1126:	79 1f       	adc	r23, r25
    1128:	8a 1f       	adc	r24, r26
    112a:	91 1d       	adc	r25, r1
    112c:	a1 1d       	adc	r26, r1
    112e:	6a 0f       	add	r22, r26
    1130:	71 1d       	adc	r23, r1
    1132:	81 1d       	adc	r24, r1
    1134:	91 1d       	adc	r25, r1
    1136:	a1 1d       	adc	r26, r1
    1138:	20 d0       	rcall	.+64     	; 0x117a <__ultoa_invert+0x84>
    113a:	09 f4       	brne	.+2      	; 0x113e <__ultoa_invert+0x48>
    113c:	68 94       	set
    113e:	3f 91       	pop	r19
    1140:	2a e0       	ldi	r18, 0x0A	; 10
    1142:	26 9f       	mul	r18, r22
    1144:	11 24       	eor	r1, r1
    1146:	30 19       	sub	r19, r0
    1148:	30 5d       	subi	r19, 0xD0	; 208
    114a:	31 93       	st	Z+, r19
    114c:	de f6       	brtc	.-74     	; 0x1104 <__ultoa_invert+0xe>
    114e:	cf 01       	movw	r24, r30
    1150:	08 95       	ret
    1152:	46 2f       	mov	r20, r22
    1154:	47 70       	andi	r20, 0x07	; 7
    1156:	40 5d       	subi	r20, 0xD0	; 208
    1158:	41 93       	st	Z+, r20
    115a:	b3 e0       	ldi	r27, 0x03	; 3
    115c:	0f d0       	rcall	.+30     	; 0x117c <__ultoa_invert+0x86>
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__ultoa_invert+0x5c>
    1160:	f6 cf       	rjmp	.-20     	; 0x114e <__ultoa_invert+0x58>
    1162:	46 2f       	mov	r20, r22
    1164:	4f 70       	andi	r20, 0x0F	; 15
    1166:	40 5d       	subi	r20, 0xD0	; 208
    1168:	4a 33       	cpi	r20, 0x3A	; 58
    116a:	18 f0       	brcs	.+6      	; 0x1172 <__ultoa_invert+0x7c>
    116c:	49 5d       	subi	r20, 0xD9	; 217
    116e:	31 fd       	sbrc	r19, 1
    1170:	40 52       	subi	r20, 0x20	; 32
    1172:	41 93       	st	Z+, r20
    1174:	02 d0       	rcall	.+4      	; 0x117a <__ultoa_invert+0x84>
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__ultoa_invert+0x6c>
    1178:	ea cf       	rjmp	.-44     	; 0x114e <__ultoa_invert+0x58>
    117a:	b4 e0       	ldi	r27, 0x04	; 4
    117c:	a6 95       	lsr	r26
    117e:	97 95       	ror	r25
    1180:	87 95       	ror	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	ba 95       	dec	r27
    1188:	c9 f7       	brne	.-14     	; 0x117c <__ultoa_invert+0x86>
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 05       	cpc	r22, r1
    118e:	71 05       	cpc	r23, r1
    1190:	08 95       	ret
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	0a 2e       	mov	r0, r26
    1198:	06 94       	lsr	r0
    119a:	57 95       	ror	r21
    119c:	47 95       	ror	r20
    119e:	37 95       	ror	r19
    11a0:	27 95       	ror	r18
    11a2:	ba 95       	dec	r27
    11a4:	c9 f7       	brne	.-14     	; 0x1198 <__ultoa_invert+0xa2>
    11a6:	62 0f       	add	r22, r18
    11a8:	73 1f       	adc	r23, r19
    11aa:	84 1f       	adc	r24, r20
    11ac:	95 1f       	adc	r25, r21
    11ae:	a0 1d       	adc	r26, r0
    11b0:	08 95       	ret

000011b2 <_exit>:
    11b2:	f8 94       	cli

000011b4 <__stop_program>:
    11b4:	ff cf       	rjmp	.-2      	; 0x11b4 <__stop_program>
